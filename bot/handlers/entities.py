"""Entity and profile handlers."""
from __future__ import annotations

from typing import Any, Dict, List, Optional

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from .base import BaseHandlers


class EntityHandlers(BaseHandlers):
    async def cb_student_me(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        uid = context.user_data.get('uid')
        if not uid:
            return await self.cmd_start(update, context)
        # Reuse existing handler without mutating Telegram objects
        await self.cb_view_student(update, context)

    async def cb_supervisor_me(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        uid = context.user_data.get('uid')
        if not uid:
            return await self.cmd_start(update, context)
        # Reuse existing handler without mutating Telegram objects
        await self.cb_view_supervisor(update, context)

    async def cb_my_topics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        uid = context.user_data.get('uid')
        if not uid:
            return await self.cmd_start(update, context)
        raw = await self._api_get(f'/api/user-topics/{uid}?limit=20') or []
        topics: List[Dict[str, Any]] = raw if isinstance(raw, list) else []
        lines = ['–ú–æ–∏ —Ç–µ–º—ã:']
        kb: List[List[InlineKeyboardButton]] = []
        any_topics = False
        for t in topics:
            tid = self._parse_positive_int(t.get('id'))
            if tid is None:
                continue
            title_raw = (t.get('title') or '').strip()
            if not title_raw:
                title_raw = f'–¢–µ–º–∞ #{tid}'
            note_parts: List[str] = []
            if t.get('is_author'):
                note_parts.append('–º–æ—è —Ç–µ–º–∞')
            if t.get('is_approved_student'):
                role_names_val = t.get('approved_role_names') or []
                if isinstance(role_names_val, list):
                    role_names = [str(name) for name in role_names_val if name]
                elif role_names_val:
                    role_names = [str(role_names_val)]
                else:
                    role_names = []
                if role_names:
                    display_roles = ', '.join(role_names[:3])
                    if len(role_names) > 3:
                        display_roles += '‚Ä¶'
                    note_parts.append(f'–º–æ–∏ —Ä–æ–ª–∏: {display_roles}')
                else:
                    note_parts.append('—É—Ç–≤–µ—Ä–∂–¥—ë–Ω(–∞) –Ω–∞ —Ä–æ–ª—å')
            if t.get('is_approved_supervisor'):
                note_parts.append('—è –Ω–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å')
            summary_line = title_raw
            if note_parts:
                summary_line += f" ({'; '.join(note_parts)})"
            lines.append(f'‚Ä¢ {summary_line}')
            button_label = title_raw
            if t.get('is_author'):
                button_label = f'‚≠ê {button_label}'
            elif t.get('is_approved_supervisor'):
                button_label = f'üßë‚Äçüè´ {button_label}'
            elif t.get('is_approved_student'):
                button_label = f'üéì {button_label}'
            button_label = (button_label or '')[:60]
            kb.append([InlineKeyboardButton(self._fix_text(button_label or f'–¢–µ–º–∞ #{tid}'), callback_data=f'topic_{tid}')])
            if t.get('is_author') or t.get('is_approved_supervisor'):
                kb.append([InlineKeyboardButton('üë®‚Äçüéì –ü–æ–¥–æ–±—Ä–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤', callback_data=f'match_students_topic_{tid}')])
            any_topics = True
        if not any_topics:
            lines.append('‚Äî –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º ‚Äî')
        kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        await q.edit_message_text(self._fix_text('\n'.join(lines)), reply_markup=self._mk(kb))

    async def cb_match_topics_for_me(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        uid = context.user_data.get('uid')
        if not uid:
            return await self.cmd_start(update, context)
        # Delegate without altering callback data
        await self.cb_match_topics_for_supervisor(update, context)

    # Lists
    async def cb_list_students(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        data = await self._api_get('/api/students?limit=10') or []
        lines: List[str] = ['–°—Ç—É–¥–µ–Ω—Ç—ã:']
        kb: List[List[InlineKeyboardButton]] = []
        for s in data:
            lines.append(f"‚Ä¢ {s.get('full_name','‚Äì')} (id={s.get('id')})")
            kb.append([InlineKeyboardButton(s.get('full_name','‚Äì')[:30], callback_data=f"student_{s.get('id')}")])
        kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        await q.edit_message_text(self._fix_text('\n'.join(lines)), reply_markup=self._mk(kb))

    async def cb_list_supervisors(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        data = await self._api_get('/api/supervisors?limit=10') or []
        lines: List[str] = ['–ù–∞—É—á–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏:']
        kb: List[List[InlineKeyboardButton]] = []
        for s in data:
            lines.append(f"‚Ä¢ {s.get('full_name','‚Äì')} (id={s.get('id')})")
            kb.append([InlineKeyboardButton(s.get('full_name','‚Äì')[:30], callback_data=f"supervisor_{s.get('id')}")])
        kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        await q.edit_message_text(self._fix_text('\n'.join(lines)), reply_markup=self._mk(kb))

    async def cb_list_topics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        data = await self._api_get('/api/topics?limit=10') or []
        lines: List[str] = ['–¢–µ–º—ã:']
        kb: List[List[InlineKeyboardButton]] = []
        for t in data:
            title = (t.get('title') or '‚Äì')[:30]
            lines.append(f"‚Ä¢ {t.get('title','‚Äì')} (id={t.get('id')})")
            kb.append([InlineKeyboardButton(title, callback_data=f"topic_{t.get('id')}")])
        kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        await q.edit_message_text(self._fix_text('\n'.join(lines)), reply_markup=self._mk(kb))

    # Profiles
    async def cb_view_student(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        # Parse student id from callback data, or fallback to current user
        try:
            sid = int(q.data.split('_')[1])
        except Exception:
            sid = context.user_data.get('uid')
            if not sid:
                return await self.cmd_start(update, context)
        s = await self._api_get(f'/api/students/{sid}')
        if not s:
            await q.edit_message_text(self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞'))
            return
        viewer_id = context.user_data.get('uid')
        can_edit = self._is_admin(update)
        if not can_edit and viewer_id is not None and sid is not None:
            try:
                can_edit = int(viewer_id) == int(sid)
            except Exception:
                can_edit = viewer_id == sid
        # Header
        lines = [
            f"–°—Ç—É–¥–µ–Ω—Ç: {s.get('full_name','‚Äì')}",
            f"Username: {s.get('username') or '‚Äì'}",
            f"Email: {s.get('email') or '‚Äì'}",
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {s.get('program') or '‚Äì'}",
            f"–ù–∞–≤—ã–∫–∏: {s.get('skills') or '‚Äì'}",
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {s.get('interests') or '‚Äì'}",
            f"CV: {(s.get('cv') or '‚Äì')[:200]}",
            f"ID: {s.get('id')}",
        ]
        # Existing recommendations from DB
        rec = await self._api_get(f'/api/user-candidates/{sid}?limit=5') or []
        if rec:
            lines.append('')
            # Back-compat: endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ–ª–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
            if rec and 'role_name' in (rec[0] or {}):
                lines.append('–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏:')
                for it in rec:
                    lines.append(f"‚Ä¢ #{it.get('rank')}. {it.get('role_name','‚Äì')} ‚Äî {it.get('topic_title','‚Äì')} (–±–∞–ª–ª={it.get('score')})")
            else:
                lines.append('–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã:')
                for it in rec:
                    lines.append(f"‚Ä¢ #{it.get('rank')}. {it.get('title','‚Äì')} (–±–∞–ª–ª={it.get('score')})")
        text = '\n'.join(lines)
        kb: List[List[InlineKeyboardButton]] = []
        if can_edit:
            kb.append([InlineKeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data=f'edit_student_{sid}')])
        kb.append([InlineKeyboardButton('üß† –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ä–æ–ª—å', callback_data=f'match_student_{sid}')])
        kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        await q.edit_message_text(self._fix_text(text), reply_markup=self._mk(kb))

    async def cb_edit_student_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        try:
            sid = int(q.data.split('_')[2])
        except Exception:
            await self._answer_callback(q, text=self._fix_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞.'), show_alert=True)
            return
        viewer_id = context.user_data.get('uid')
        if not self._is_admin(update):
            if viewer_id is None:
                await self._answer_callback(q, text=self._fix_text('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'), show_alert=True)
                return
            try:
                if int(viewer_id) != int(sid):
                    await self._answer_callback(q, text=self._fix_text('–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.'), show_alert=True)
                    return
            except Exception:
                if viewer_id != sid:
                    await self._answer_callback(q, text=self._fix_text('–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.'), show_alert=True)
                    return
        student = await self._api_get(f'/api/students/{sid}')
        if not student:
            await q.edit_message_text(self._fix_text('–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.'))
            return
        context.user_data['awaiting'] = 'edit_student_program'
        context.user_data['edit_student_payload'] = {'user_id': sid}
        context.user_data['edit_student_original'] = student
        prompt = (
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞.\n"
            f"–¢–µ–∫—É—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: {student.get('program') or '‚Äì'}.\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
        )
        await q.message.reply_text(self._fix_text(prompt))

    async def cb_view_supervisor(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        # Parse supervisor id from callback data, or fallback to current user
        try:
            uid = int(q.data.split('_')[1])
        except Exception:
            uid = context.user_data.get('uid')
            if not uid:
                return await self.cmd_start(update, context)
        s = await self._api_get(f'/api/supervisors/{uid}')
        if not s:
            await q.edit_message_text(self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è'))
            return
        viewer_id = context.user_data.get('uid')
        can_edit = self._is_admin(update)
        if not can_edit and viewer_id is not None and uid is not None:
            try:
                can_edit = int(viewer_id) == int(uid)
            except Exception:
                can_edit = viewer_id == uid
        lines = [
            f"–ù–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {s.get('full_name','‚Äì')}",
            f"Username: {s.get('username') or '‚Äì'}",
            f"Email: {s.get('email') or '‚Äì'}",
            f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {s.get('position') or '‚Äì'}",
            f"–°—Ç–µ–ø–µ–Ω—å: {s.get('degree') or '‚Äì'}",
            f"–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {s.get('capacity') or '‚Äì'}",
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {s.get('interests') or '‚Äì'}",
            f"ID: {s.get('id')}",
        ]
        rec = await self._api_get(f'/api/user-candidates/{uid}?limit=5') or []
        if rec:
            lines.append('')
            lines.append('–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–º—ã:')
            for it in rec:
                lines.append(f"‚Ä¢ #{it.get('rank')}. {it.get('title','‚Äì')} (–±–∞–ª–ª={it.get('score')})")
        text = '\n'.join(lines)
        kb: List[List[InlineKeyboardButton]] = []
        if can_edit:
            kb.append([InlineKeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data=f'edit_supervisor_{uid}')])
        kb.append([InlineKeyboardButton('üß† –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–º—É', callback_data=f'match_topics_for_supervisor_{uid}')])
        invite_ctx = context.user_data.get('supervisor_invite_context') or {}
        topic_id_for_invite = invite_ctx.get('topic_id')
        supervisor_ids = {str(x) for x in (invite_ctx.get('supervisor_ids') or [])}
        can_invite = False
        if topic_id_for_invite and str(uid) in supervisor_ids:
            if self._is_admin(update):
                can_invite = True
            else:
                viewer_id = context.user_data.get('uid')
                author_id = invite_ctx.get('author_user_id')
                if viewer_id is not None and author_id not in (None, ''):
                    try:
                        can_invite = int(author_id) == int(viewer_id)
                    except Exception:
                        can_invite = author_id == viewer_id
                elif viewer_id is not None:
                    topic_info = await self._api_get(f'/api/topics/{topic_id_for_invite}')
                    if topic_info:
                        invite_ctx['author_user_id'] = topic_info.get('author_user_id')
                        invite_ctx['topic_title'] = invite_ctx.get('topic_title') or topic_info.get('title') or f'#{topic_id_for_invite}'
                        refreshed_author = invite_ctx.get('author_user_id')
                        if refreshed_author not in (None, ''):
                            try:
                                can_invite = int(refreshed_author) == int(viewer_id)
                            except Exception:
                                can_invite = refreshed_author == viewer_id
        if can_invite:
            kb.append([
                InlineKeyboardButton(
                    'ü§ù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—á–∞—Å—Ç–∏–µ',
                    callback_data=f'invite_supervisor_{topic_id_for_invite}_{uid}',
                )
            ])
        kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        await q.edit_message_text(self._fix_text(text), reply_markup=self._mk(kb))

    async def cb_edit_supervisor_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        try:
            uid = int(q.data.split('_')[2])
        except Exception:
            await self._answer_callback(q, text=self._fix_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è.'), show_alert=True)
            return
        viewer_id = context.user_data.get('uid')
        if not self._is_admin(update):
            if viewer_id is None:
                await self._answer_callback(q, text=self._fix_text('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'), show_alert=True)
                return
            try:
                if int(viewer_id) != int(uid):
                    await self._answer_callback(q, text=self._fix_text('–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.'), show_alert=True)
                    return
            except Exception:
                if viewer_id != uid:
                    await self._answer_callback(q, text=self._fix_text('–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.'), show_alert=True)
                    return
        supervisor = await self._api_get(f'/api/supervisors/{uid}')
        if not supervisor:
            await q.edit_message_text(self._fix_text('–ü—Ä–æ—Ñ–∏–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.'))
            return
        context.user_data['awaiting'] = 'edit_supervisor_position'
        context.user_data['edit_supervisor_payload'] = {'user_id': uid}
        context.user_data['edit_supervisor_original'] = supervisor
        prompt = (
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.\n"
            f"–¢–µ–∫—É—â–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {supervisor.get('position') or '‚Äì'}.\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
        )
        await q.message.reply_text(self._fix_text(prompt))

    async def cb_view_topic(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        tid = int(q.data.split('_')[1])
        t = await self._api_get(f'/api/topics/{tid}')
        if not t:
            await q.edit_message_text(self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–º—É'))
            return
        author_id = t.get('author_user_id')
        uid = context.user_data.get('uid')
        viewer_role_name = self._normalize_role_value(context.user_data.get('role')) or ''
        can_add_role = False
        if self._is_admin(update):
            can_add_role = True
        elif uid is not None and author_id is not None:
            try:
                can_add_role = int(author_id) == int(uid)
            except Exception:
                can_add_role = author_id == uid
        role = t.get('seeking_role')
        text = (
            f"–¢–µ–º–∞: {t.get('title','‚Äì')}\n"
            f"–ê–≤—Ç–æ—Ä: {t.get('author','‚Äì')}\n"
            f"–ö–æ–≥–æ –∏—â–µ–º: {role}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {(t.get('description') or '‚Äì')[:500]}\n"
            f"–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {(t.get('expected_outcomes') or '‚Äì')[:400]}\n"
            f"–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏: {t.get('required_skills') or '‚Äì'}\n"
            f"ID: {t.get('id')}\n"
        )
        # Roles for this topic
        roles = await self._api_get(f'/api/topics/{tid}/roles') or []
        lines2: List[str] = [text, '', '–†–æ–ª–∏:']
        kb: List[List[InlineKeyboardButton]] = []
        for r in roles:
            name = (r.get('name') or '‚Äì')[:40]
            lines2.append(f"‚Ä¢ {name} (role_id={r.get('id')})")
            kb.append([InlineKeyboardButton(f"üé≠ {name}", callback_data=f"role_{r.get('id')}")])
        if not roles:
            lines2.append('‚Äî –Ω–µ—Ç —Ä–æ–ª–µ–π ‚Äî')
        if can_add_role:
            kb.insert(0, [InlineKeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—É', callback_data=f'edit_topic_{tid}')])
            kb.append([InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å', callback_data=f'add_role_{tid}')])
        can_apply_topic = False
        if uid is not None and author_id is not None:
            try:
                same_author = int(author_id) == int(uid)
            except Exception:
                same_author = author_id == uid
        else:
            same_author = False
        target_role = (role or 'student').lower()
        if uid is not None and not same_author and target_role in {'student', 'supervisor'}:
            viewer_matches = target_role == viewer_role_name
            can_apply_topic = viewer_matches and bool(author_id)
        if can_apply_topic:
            apply_text = 'üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ–º—É' if target_role == 'student' else 'üì® –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —Ç–µ–º—É'
            kb.append([InlineKeyboardButton(apply_text, callback_data=f'apply_topic_{tid}')])
        kb.append([InlineKeyboardButton('üßë‚Äçüè´ –ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è', callback_data=f'match_supervisor_{tid}')])
        kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        await q.edit_message_text(self._fix_text('\n'.join(lines2)), reply_markup=self._mk(kb))

    async def cb_view_role(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        try:
            rid = int(q.data.split('_')[1])
        except Exception:
            await q.edit_message_text(self._fix_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–æ–ª–∏.'))
            return
        role = await self._api_get(f'/api/roles/{rid}')
        if not role:
            await q.edit_message_text(self._fix_text('–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'))
            return

        topic_id = role.get('topic_id')
        topic_title = role.get('topic_title') or (f'–¢–µ–º–∞ #{topic_id}' if topic_id else '‚Äî')
        role_name = (role.get('name') or '‚Äì').strip() or '‚Äì'
        author_name = (role.get('author') or '‚Äì').strip() or '‚Äì'
        description = (role.get('description') or '‚Äì').strip()
        required_skills = (role.get('required_skills') or '‚Äì').strip() or '‚Äì'
        capacity = role.get('capacity')
        capacity_display = '‚Äì'
        if capacity not in (None, ''):
            try:
                capacity_display = str(int(capacity))
            except Exception:
                capacity_display = str(capacity)

        lines: List[str] = [
            f'–†–æ–ª—å: {role_name}',
            f'–¢–µ–º–∞: {topic_title}',
            f'–ê–≤—Ç–æ—Ä —Ç–µ–º—ã: {author_name}',
            f'–û–ø–∏—Å–∞–Ω–∏–µ: {(description or "‚Äì")[:500] or "‚Äì"}',
            f'–ù–∞–≤—ã–∫–∏: {required_skills}',
            f'–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {capacity_display}',
            f'ID —Ä–æ–ª–∏: {rid}',
        ]

        candidates_resp = await self._api_get(f'/api/role-candidates/{rid}?limit=5')
        candidates: List[Dict[str, Any]] = []
        if isinstance(candidates_resp, list):
            candidates = [c for c in candidates_resp if isinstance(c, dict)]
        if candidates:
            lines.append('')
            lines.append('–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')

        kb: List[List[InlineKeyboardButton]] = []
        candidate_buttons: List[List[InlineKeyboardButton]] = []
        for item in candidates:
            rank = item.get('rank')
            rank_label = f'#{rank}' if rank else '#?'
            full_name = (item.get('full_name') or '‚Äì').strip() or '‚Äì'
            score = item.get('score')
            score_suffix = ''
            if score not in (None, ''):
                score_suffix = f' (–±–∞–ª–ª={score})'
            lines.append(f'{rank_label}. {full_name}{score_suffix}')
            sid = self._parse_positive_int(item.get('user_id'))
            if sid is not None:
                candidate_buttons.append([
                    InlineKeyboardButton(
                        self._fix_text(f'üë§ {full_name[:40]}'), callback_data=f'student_{sid}'
                    )
                ])

        uid = context.user_data.get('uid')
        author_id = role.get('author_user_id')
        viewer_role = self._normalize_role_value(context.user_data.get('role'))
        same_author = self._ids_equal(uid, author_id)
        is_admin = self._is_admin(update)

        if is_admin or same_author:
            kb.append([InlineKeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª—å', callback_data=f'edit_role_{rid}')])
            kb.append([InlineKeyboardButton('üë• –ü–æ–¥–æ–±—Ä–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤', callback_data=f'match_role_{rid}')])

        can_apply = (
            viewer_role == 'student'
            and not same_author
            and uid is not None
            and author_id is not None
        )
        if can_apply:
            kb.append([InlineKeyboardButton('üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ–ª—å', callback_data=f'apply_role_{rid}')])

        kb.extend(candidate_buttons)

        if topic_id:
            kb.append([InlineKeyboardButton('üìö –ö —Ç–µ–º–µ', callback_data=f'topic_{topic_id}')])
        kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])

        await q.edit_message_text(self._fix_text('\n'.join(lines)), reply_markup=self._mk(kb))

    async def cb_apply_role(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        try:
            rid = int(q.data.rsplit('_', 1)[1])
        except Exception:
            await q.edit_message_text(self._fix_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–æ–ª–∏.'))
            return

        role = await self._api_get(f'/api/roles/{rid}')
        if not role:
            await q.edit_message_text(self._fix_text('–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'))
            return

        uid = context.user_data.get('uid')
        if uid is None:
            await q.message.reply_text(self._fix_text('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start.'))
            return

        viewer_role = self._normalize_role_value(context.user_data.get('role'))
        if viewer_role != 'student':
            await q.message.reply_text(self._fix_text('–ó–∞—è–≤–∫—É –Ω–∞ —Ä–æ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç.'))
            return

        author_id = role.get('author_user_id')
        if not author_id:
            await q.message.reply_text(self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–∞—è–≤–∫–∏.'))
            return

        if self._ids_equal(uid, author_id):
            await q.message.reply_text(self._fix_text('–ù–µ–ª—å–∑—è –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–æ–ª—å.'))
            return

        topic_id = role.get('topic_id')
        topic_title = role.get('topic_title') or (f'–¢–µ–º–∞ #{topic_id}' if topic_id else '—Ç–µ–º–∞')
        role_name = (role.get('name') or '').strip() or f'–†–æ–ª—å #{rid}'

        default_body = (
            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—Ç–µ–ª(–∞) –±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ä–æ–ª–∏ "{role_name}" '
            f'–ø–æ —Ç–µ–º–µ "{topic_title}".'
        )
        prompt = (
            f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ —Ç–µ–º—ã ¬´{topic_title}¬ª –ø–æ —Ä–æ–ª–∏ ¬´{role_name}¬ª.\n'
            '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /start. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ¬´-¬ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω.'
        )

        payload: Dict[str, Any] = {
            'sender_user_id': str(uid),
            'receiver_user_id': str(author_id),
            'role_id': str(rid),
            'topic_title': topic_title,
            'role_name': role_name,
            'receiver_name': role.get('author'),
            'default_body': default_body,
            'return_callback': f'role_{rid}',
            'source': 'role',
        }
        if topic_id is not None:
            payload['topic_id'] = str(topic_id)

        context.user_data['application_payload'] = payload
        context.user_data['awaiting'] = 'submit_application_body'
        await q.message.reply_text(self._fix_text(prompt))

    async def cb_apply_topic(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        try:
            tid = int(q.data.rsplit('_', 1)[1])
        except Exception:
            await q.edit_message_text(self._fix_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–º—ã.'))
            return
        uid = context.user_data.get('uid')
        viewer_role = self._normalize_role_value(context.user_data.get('role'))
        if not uid:
            await q.edit_message_text(self._fix_text('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start.'))
            return
        topic = await self._api_get(f'/api/topics/{tid}')
        if not topic:
            await q.edit_message_text(self._fix_text('–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'))
            return
        author_id = topic.get('author_user_id')
        if not author_id:
            await q.edit_message_text(self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–∞—è–≤–∫–∏.'))
            return
        try:
            same_author = int(author_id) == int(uid)
        except Exception:
            same_author = author_id == uid
        if same_author:
            await q.edit_message_text(self._fix_text('–ù–µ–ª—å–∑—è –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ç–µ–º—É.'))
            return
        target_role = (topic.get('seeking_role') or 'student').lower()
        if target_role not in {'student', 'supervisor'} or viewer_role != target_role:
            await q.edit_message_text(self._fix_text('–≠—Ç–∞ —Ç–µ–º–∞ –∏—â–µ—Ç –¥—Ä—É–≥—É—é —Ä–æ–ª—å.'))
            return
        title = topic.get('title') or f'#{tid}'
        if target_role == 'student':
            roles = await self._api_get(f'/api/topics/{tid}/roles') or []
            role_choices: List[tuple[int, str]] = []
            for r in roles:
                rid = self._parse_positive_int(r.get('id'))
                if rid is None:
                    continue
                name = (r.get('name') or '').strip()
                label = name or f'–†–æ–ª—å #{rid}'
                role_choices.append((rid, label))
            if not role_choices:
                kb = [[InlineKeyboardButton('‚¨ÖÔ∏è –ö —Ç–µ–º–µ', callback_data=f'topic_{tid}')]]
                kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
                await q.message.reply_text(
                    self._fix_text(
                        '–í —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–æ–ª–µ–π. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
                    ),
                    reply_markup=self._mk(kb),
                )
                return
            lines = [f'–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ–º—É ¬´{title}¬ª, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ä–æ–ª—å:']
            if role_choices:
                lines.append('')
                lines.append('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:')
                for _, label in role_choices:
                    lines.append(f'‚Ä¢ {label}')
            kb = [
                [InlineKeyboardButton(f'üì® {label[:40]}', callback_data=f'apply_role_{rid}')]
                for rid, label in role_choices
            ]
            kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ö —Ç–µ–º–µ', callback_data=f'topic_{tid}')])
            kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
            await q.message.reply_text(
                self._fix_text('\n'.join(lines)),
                reply_markup=self._mk(kb),
            )
            return
        if target_role == 'supervisor':
            default_body = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤(–∞) —Å—Ç–∞—Ç—å –Ω–∞—É—á–Ω—ã–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –ø–æ —Ç–µ–º–µ "{title}".'
            prompt = (
                f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ —Ç–µ–º—ã ¬´{title}¬ª.\n'
                '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ—ë–º –æ–ø—ã—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /start. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ¬´-¬ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω.'
            )
        else:
            default_body = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—Ç–µ–ª(–∞) –±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ç–µ–º–µ "{title}".'
            prompt = (
                f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ —Ç–µ–º—ã ¬´{title}¬ª.\n'
                '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /start. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ¬´-¬ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω.'
            )
        payload = {
            'sender_user_id': str(uid),
            'receiver_user_id': str(author_id),
            'topic_id': str(tid),
            'role_id': None,
            'topic_title': title,
            'target_role': target_role,
            'default_body': default_body,
            'return_callback': f'topic_{tid}',
            'source': 'topic',
        }
        context.user_data['application_payload'] = payload
        context.user_data['awaiting'] = 'submit_application_body'
        await q.message.reply_text(self._fix_text(prompt))

    async def cb_edit_topic_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        try:
            tid = int(q.data.split('_')[2])
        except Exception:
            await self._answer_callback(q, text=self._fix_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–º—ã.'), show_alert=True)
            return
        topic = await self._api_get(f'/api/topics/{tid}')
        if not topic:
            await q.edit_message_text(self._fix_text('–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'))
            return
        author_id = topic.get('author_user_id')
        viewer_id = context.user_data.get('uid')
        is_admin = self._is_admin(update)
        if not is_admin:
            if viewer_id is None or author_id is None:
                await self._answer_callback(q, text=self._fix_text('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ç–µ–º—É.'), show_alert=True)
                return
            try:
                if int(viewer_id) != int(author_id):
                    await self._answer_callback(q, text=self._fix_text('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ç–µ–º—É.'), show_alert=True)
                    return
            except Exception:
                if viewer_id != author_id:
                    await self._answer_callback(q, text=self._fix_text('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ç–µ–º—É.'), show_alert=True)
                    return
        context.user_data['awaiting'] = 'edit_topic_title'
        payload: Dict[str, Any] = {'topic_id': tid}
        if viewer_id is not None and not is_admin:
            payload['editor_user_id'] = str(viewer_id)
        context.user_data['edit_topic_payload'] = payload
        context.user_data['edit_topic_original'] = topic
        prompt = (
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã.\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {topic.get('title') or '‚Äì'}.\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
        )
        await q.message.reply_text(self._fix_text(prompt))

    async def cb_edit_role_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        try:
            rid = int(q.data.split('_')[2])
        except Exception:
            await self._answer_callback(q, text=self._fix_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–æ–ª–∏.'), show_alert=True)
            return
        role = await self._api_get(f'/api/roles/{rid}')
        if not role:
            await q.edit_message_text(self._fix_text('–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'))
            return
        author_id = role.get('author_user_id')
        viewer_id = context.user_data.get('uid')
        is_admin = self._is_admin(update)
        if not is_admin:
            if viewer_id is None or author_id is None or not self._ids_equal(viewer_id, author_id):
                await self._answer_callback(q, text=self._fix_text('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ä–æ–ª—å.'), show_alert=True)
                return
        context.user_data['awaiting'] = 'edit_role_name'
        payload: Dict[str, Any] = {'role_id': rid}
        if viewer_id is not None and not is_admin:
            payload['editor_user_id'] = str(viewer_id)
        context.user_data['edit_role_payload'] = payload
        context.user_data['edit_role_original'] = role
        prompt = (
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏.\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {role.get('name') or '‚Äì'}.\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
        )
        await q.message.reply_text(self._fix_text(prompt))

    # Matching
    async def cb_match_student(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        sid = int(q.data.split('_')[2])
        viewer_id = context.user_data.get('uid')
        same_user = self._ids_equal(viewer_id, sid)
        is_admin = self._is_admin(update)
        res = await self._api_post('/match-student', data={'student_user_id': sid})
        if not res or res.get('status') != 'ok':
            await q.edit_message_text(self._fix_text('–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ —Ä–æ–ª–µ–π –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞'))
            return
        items = res.get('items', [])
        lines = [f'–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–æ–ª–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ #{sid}:']
        kb: List[List[InlineKeyboardButton]] = []
        context.user_data['student_match_back'] = f'match_student_{sid}'
        for it in items:
            rank = it.get('rank')
            role_name = (it.get('role_name') or '‚Äì').strip() or '‚Äì'
            topic_title = (it.get('topic_title') or '‚Äì').strip() or '‚Äì'
            reason_raw = (it.get('reason') or '').strip()
            reason = ' '.join(reason_raw.split())
            rank_label = f"#{rank}" if rank else '#?'
            lines.append(f"{rank_label}. {role_name} ‚Äî {topic_title}")
            if reason:
                lines.append(f"   –ü–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç: {reason}")
            rid = it.get('role_id')
            if rid:
                btn_title_source = role_name if role_name and role_name != '‚Äì' else ''
                if not btn_title_source and topic_title and topic_title != '‚Äì':
                    btn_title_source = topic_title
                if not btn_title_source:
                    btn_title_source = f'–†–æ–ª—å {rank_label}'
                btn_title = btn_title_source[:40]
                kb.append([InlineKeyboardButton(self._fix_text(btn_title), callback_data=f'role_{rid}')])
        if not kb:
            lines.append('‚Äî –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–æ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî')
        if is_admin or not same_user:
            kb.append([InlineKeyboardButton('–ö –ø—Ä–æ—Ñ–∏–ª—é —Å—Ç—É–¥–µ–Ω—Ç–∞', callback_data=f'student_{sid}')])
        kb.append([InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_main')])
        await q.edit_message_text(self._fix_text('\n'.join(lines)), reply_markup=self._mk(kb))

    # Messages (applications)
    async def cb_messages_inbox(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        uid = context.user_data.get('uid')
        if uid is None:
            kb = [[InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')]]
            await q.edit_message_text(
                self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start.'),
                reply_markup=self._mk(kb),
            )
            return
        data_tag = (q.data or 'messages_inbox')
        status_filter = 'pending'
        if data_tag.endswith('_all'):
            status_filter = None
        elif data_tag.endswith('_pending'):
            status_filter = 'pending'
        url = f'/api/messages/inbox?user_id={uid}'
        if status_filter:
            url += f'&status={status_filter}'
        res = await self._api_get(url)
        messages = res if isinstance(res, list) else []
        list_callback = 'messages_inbox' if status_filter == 'pending' else 'messages_inbox_all'
        self._store_messages_cache(context, messages, source='inbox', list_callback=list_callback)
        status_labels = {
            'pending': '–æ–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è',
            'accepted': '–ø—Ä–∏–Ω—è—Ç–∞',
            'rejected': '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            'canceled': '–æ—Ç–º–µ–Ω–µ–Ω–∞',
        }
        header = '–í—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏'
        header += ' (–æ–∂–∏–¥–∞—é—Ç —Ä–µ—à–µ–Ω–∏—è)' if status_filter == 'pending' else ' (–≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã)'
        lines: List[str] = [header]
        display_items = messages[:10]
        if not display_items:
            lines.append('‚Äî –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ ‚Äî')
        else:
            for msg in display_items:
                msg_id = msg.get('id')
                sender = msg.get('sender_name') or f"#{msg.get('sender_user_id')}" or '‚Äî'
                topic = msg.get('topic_title') or f"–¢–µ–º–∞ #{msg.get('topic_id')}" or '‚Äî'
                role_name = msg.get('role_name')
                status_label = status_labels.get((msg.get('status') or '').lower(), msg.get('status') or '')
                line = f"‚Ä¢ #{msg_id} –æ—Ç {sender} ‚Äî {topic}"
                if role_name:
                    line += f" ‚Äî —Ä–æ–ª—å: {role_name}"
                if status_label:
                    line += f" ‚Äî {status_label}"
                lines.append(line)
        if len(messages) > len(display_items):
            lines.append(f'–ü–æ–∫–∞–∑–∞–Ω—ã {len(display_items)} –∏–∑ {len(messages)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫.')
        kb: List[List[InlineKeyboardButton]] = []
        if status_filter == 'pending':
            kb.append([InlineKeyboardButton('üìú –í—Å–µ –∑–∞—è–≤–∫–∏', callback_data='messages_inbox_all')])
        else:
            kb.append([InlineKeyboardButton('‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ', callback_data='messages_inbox')])
        for msg in display_items:
            msg_id = msg.get('id')
            if msg_id is None:
                continue
            sender = msg.get('sender_name') or f"#{msg.get('sender_user_id')}" or '‚Äî'
            label = f"#{msg_id}: {sender}"[:60]
            kb.append([InlineKeyboardButton(label, callback_data=f'message_{msg_id}')])
        kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        await q.edit_message_text(self._fix_text('\n'.join(lines)), reply_markup=self._mk(kb))

    async def cb_messages_outbox(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        uid = context.user_data.get('uid')
        if uid is None:
            kb = [[InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')]]
            await q.edit_message_text(
                self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start.'),
                reply_markup=self._mk(kb),
            )
            return
        data_tag = (q.data or 'messages_outbox')
        status_filter = 'pending'
        if data_tag.endswith('_all'):
            status_filter = None
        elif data_tag.endswith('_pending'):
            status_filter = 'pending'
        url = f'/api/messages/outbox?user_id={uid}'
        if status_filter:
            url += f'&status={status_filter}'
        res = await self._api_get(url)
        messages = res if isinstance(res, list) else []
        list_callback = 'messages_outbox' if status_filter == 'pending' else 'messages_outbox_all'
        self._store_messages_cache(context, messages, source='outbox', list_callback=list_callback)
        status_labels = {
            'pending': '–æ–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è',
            'accepted': '–ø—Ä–∏–Ω—è—Ç–∞',
            'rejected': '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            'canceled': '–æ—Ç–º–µ–Ω–µ–Ω–∞',
        }
        header = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏'
        header += ' (–æ–∂–∏–¥–∞—é—Ç —Ä–µ—à–µ–Ω–∏—è)' if status_filter == 'pending' else ' (–≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã)'
        lines: List[str] = [header]
        display_items = messages[:10]
        if not display_items:
            lines.append('‚Äî –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ ‚Äî')
        else:
            for msg in display_items:
                msg_id = msg.get('id')
                receiver = msg.get('receiver_name') or f"#{msg.get('receiver_user_id')}" or '‚Äî'
                topic = msg.get('topic_title') or f"–¢–µ–º–∞ #{msg.get('topic_id')}" or '‚Äî'
                role_name = msg.get('role_name')
                status_label = status_labels.get((msg.get('status') or '').lower(), msg.get('status') or '')
                line = f"‚Ä¢ #{msg_id} ‚Üí {receiver} ‚Äî {topic}"
                if role_name:
                    line += f" ‚Äî —Ä–æ–ª—å: {role_name}"
                if status_label:
                    line += f" ‚Äî {status_label}"
                lines.append(line)
        if len(messages) > len(display_items):
            lines.append(f'–ü–æ–∫–∞–∑–∞–Ω—ã {len(display_items)} –∏–∑ {len(messages)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫.')
        kb: List[List[InlineKeyboardButton]] = []
        if status_filter == 'pending':
            kb.append([InlineKeyboardButton('üìú –í—Å–µ –∑–∞—è–≤–∫–∏', callback_data='messages_outbox_all')])
        else:
            kb.append([InlineKeyboardButton('‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ', callback_data='messages_outbox')])
        for msg in display_items:
            msg_id = msg.get('id')
            if msg_id is None:
                continue
            receiver = msg.get('receiver_name') or f"#{msg.get('receiver_user_id')}" or '‚Äî'
            label = f"#{msg_id}: {receiver}"[:60]
            kb.append([InlineKeyboardButton(label, callback_data=f'message_{msg_id}')])
        kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        await q.edit_message_text(self._fix_text('\n'.join(lines)), reply_markup=self._mk(kb))

    async def cb_message_view(self, update: Update, context: ContextTypes.DEFAULT_TYPE, *, message_id: Optional[int] = None, refresh: bool = False, notice: Optional[str] = None):
        q = update.callback_query; await self._answer_callback(q)
        try:
            mid = message_id if message_id is not None else int(q.data.rsplit('_', 1)[1])
        except Exception:
            await q.edit_message_text(self._fix_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞—è–≤–∫–∏.'))
            return
        uid = context.user_data.get('uid')
        if uid is None:
            kb = [[InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')]]
            await q.edit_message_text(
                self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start.'),
                reply_markup=self._mk(kb),
            )
            return
        msg = await self._get_message_details(context, uid, mid, refresh=refresh)
        if not msg:
            await q.edit_message_text(self._fix_text('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫.'))
            return
        text, kb = self._build_message_view(msg, uid, notice=notice)
        await q.edit_message_text(self._fix_text(text), reply_markup=self._mk(kb))

    async def cb_message_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        data = (q.data or '').split('_')
        if len(data) < 3:
            await self._answer_callback(q)
            await q.edit_message_text(self._fix_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.'))
            return
        action = data[1]
        try:
            mid = int(data[2])
        except Exception:
            await self._answer_callback(q, text=self._fix_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞—è–≤–∫–∏.'), show_alert=True)
            return
        uid = context.user_data.get('uid')
        if uid is None:
            await self._answer_callback(q, text=self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start.'), show_alert=True)
            return
        payload = {
            'message_id': str(mid),
            'responder_user_id': str(uid),
            'action': action,
        }
        res = await self._api_post('/api/messages/respond', data=payload)
        if not res or res.get('status') != 'ok':
            msg_text = (res or {}).get('message') or '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É.'
            await self._answer_callback(q, text=self._fix_text(msg_text), show_alert=True)
            return
        await self._answer_callback(q)
        notice_map = {
            'accept': '‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.',
            'reject': '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.',
            'cancel': 'üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        }
        msg = await self._get_message_details(context, uid, mid, refresh=True)
        if msg:
            text, kb = self._build_message_view(msg, uid, notice=notice_map.get(action))
            await q.edit_message_text(self._fix_text(text), reply_markup=self._mk(kb))
        else:
            fallback = notice_map.get(action) or '–ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.'
            kb = [[InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')]]
            await q.edit_message_text(self._fix_text(fallback), reply_markup=self._mk(kb))

    def _store_messages_cache(self, context: ContextTypes.DEFAULT_TYPE, messages: List[Dict[str, Any]], *, source: str, list_callback: str) -> None:
        cache = context.user_data.setdefault('messages_cache', {})
        for msg in messages or []:
            mid = msg.get('id')
            if mid is None:
                continue
            entry = dict(msg)
            entry['__source'] = source
            entry['__list_callback'] = list_callback
            cache[str(mid)] = entry

    async def _get_message_details(self, context: ContextTypes.DEFAULT_TYPE, user_id: Any, message_id: int, *, refresh: bool = False) -> Optional[Dict[str, Any]]:
        cache = context.user_data.setdefault('messages_cache', {})
        key = str(message_id)
        if not refresh and key in cache:
            return cache.get(key)
        if user_id is None:
            return cache.get(key)
        uid_str = str(user_id)
        for endpoint in ('inbox', 'outbox'):
            url = f'/api/messages/{endpoint}?user_id={uid_str}'
            res = await self._api_get(url)
            rows = res if isinstance(res, list) else []
            list_callback = f'messages_{endpoint}_all'
            self._store_messages_cache(context, rows, source=endpoint, list_callback=list_callback)
            cached = cache.get(key)
            if cached:
                return cached
        return cache.get(key)

    def _build_message_view(
        self,
        message: Dict[str, Any],
        viewer_id: Any,
        notice: Optional[str] = None,
    ) -> tuple[str, List[List[InlineKeyboardButton]]]:
        status_labels = {
            'pending': '–æ–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è',
            'accepted': '–ø—Ä–∏–Ω—è—Ç–∞',
            'rejected': '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            'canceled': '–æ—Ç–º–µ–Ω–µ–Ω–∞',
        }
        lines: List[str] = []
        if notice:
            lines.append(notice)
            lines.append('')
        msg_id = message.get('id')
        status_val = (message.get('status') or '').lower()
        status_label = status_labels.get(status_val, message.get('status') or '')
        lines.append(f'–ó–∞—è–≤–∫–∞ #{msg_id}')
        if status_label:
            lines.append(f'–°—Ç–∞—Ç—É—Å: {status_label}')
        sender_name = message.get('sender_name') or message.get('sender_full_name') or ''
        receiver_name = message.get('receiver_name') or message.get('receiver_full_name') or ''
        sender_id = message.get('sender_user_id')
        receiver_id = message.get('receiver_user_id')
        sender_line = sender_name or f'#{sender_id}'
        receiver_line = receiver_name or f'#{receiver_id}'
        lines.append(f'–û—Ç: {sender_line} (id={sender_id})')
        lines.append(f'–ö–æ–º—É: {receiver_line} (id={receiver_id})')
        topic_title = message.get('topic_title') or f"–¢–µ–º–∞ #{message.get('topic_id')}"
        lines.append(f'–¢–µ–º–∞: {topic_title}')
        role_name = message.get('role_name')
        if role_name:
            lines.append(f'–†–æ–ª—å: {role_name}')
        body = message.get('body') or '‚Äî'
        lines.append('')
        lines.append('–°–æ–æ–±—â–µ–Ω–∏–µ:')
        lines.append(body)
        answer = message.get('answer')
        if answer:
            lines.append('')
            lines.append('–û—Ç–≤–µ—Ç:')
            lines.append(answer)
        kb: List[List[InlineKeyboardButton]] = []
        def _same_user(a: Any, b: Any) -> bool:
            try:
                return int(a) == int(b)
            except Exception:
                return a == b
        if status_val == 'pending':
            if _same_user(receiver_id, viewer_id):
                kb.append([
                    InlineKeyboardButton('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data=f'message_accept_{msg_id}'),
                    InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'message_reject_{msg_id}')
                ])
            elif _same_user(sender_id, viewer_id):
                kb.append([InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'message_cancel_{msg_id}')])
        source = message.get('__source') or ('inbox' if _same_user(receiver_id, viewer_id) else 'outbox')
        back_cb = message.get('__list_callback')
        if not back_cb:
            back_cb = 'messages_inbox' if source == 'inbox' else 'messages_outbox'
        back_label = '‚¨ÖÔ∏è –ö –≤—Ö–æ–¥—è—â–∏–º' if source == 'inbox' else '‚¨ÖÔ∏è –ö –º–æ–∏–º –∑–∞—è–≤–∫–∞–º'
        kb.append([InlineKeyboardButton(back_label, callback_data=back_cb)])
        return '\n'.join(lines), kb

    # Import students from Google Sheets
    async def cb_import_students(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        cfg = await self._api_get('/api/sheets-config')
        if not cfg or cfg.get('status') != 'configured':
            text = 'Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–∫–∞–∂–∏—Ç–µ SPREADSHEET_ID –∏ SERVICE_ACCOUNT_FILE –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.'
            kb = [[InlineKeyboardButton('üë®‚Äçüéì –ö —Å—Ç—É–¥–µ–Ω—Ç–∞–º', callback_data='list_students')]]
            await q.edit_message_text(self._fix_text(text), reply_markup=self._mk(kb))
            return
        sid = cfg.get('spreadsheet_id')
        # Provide immediate feedback so UI doesn't look frozen
        try:
            await q.edit_message_text(self._fix_text('Import started... This may take up to 2-3 minutes.'))
        except Exception:
            pass
        # Allow longer timeout for imports (downloads + DB work)
        res = await self._api_post('/api/import-sheet', data={'spreadsheet_id': sid}, timeout=300)
        if not res or res.get('status') != 'success':
            msg = (res or {}).get('message') or '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞'
            text = f'‚ùå –ò–º–ø–æ—Ä—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: {msg}'
        else:
            stats = res.get('stats', {})
            text = (
                '‚úÖ –ò–º–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.\n'
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: +{stats.get('inserted_users', 0)}\n"
                f"–ü—Ä–æ—Ñ–∏–ª–∏: +{stats.get('inserted_profiles', stats.get('upserted_profiles', 0))}\n"
                f"–¢–µ–º—ã: +{stats.get('inserted_topics', 0)}"
            )
        kb = [[InlineKeyboardButton('üë®‚Äçüéì –ö —Å—Ç—É–¥–µ–Ω—Ç–∞–º', callback_data='list_students')]]
        await q.edit_message_text(self._fix_text(text), reply_markup=self._mk(kb))

    # List menus with add buttons (new handlers)
    async def cb_list_students_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        data = await self._api_get('/api/students?limit=10') or []
        lines: List[str] = ['–°—Ç—É–¥–µ–Ω—Ç—ã:']
        kb: List[List[InlineKeyboardButton]] = [
            [InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞', callback_data='add_student')],
            [InlineKeyboardButton('üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Google-—Ç–∞–±–ª–∏—Ü', callback_data='import_students')],
        ]
        for s in data:
            lines.append(f"‚Ä¢ {s.get('full_name','‚Äì')} (id={s.get('id')})")
            kb.append([InlineKeyboardButton((s.get('full_name','‚Äì')[:30]), callback_data=f"student_{s.get('id')}")])
        kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        await q.edit_message_text(self._fix_text('\n'.join(lines)), reply_markup=self._mk(kb))

    async def cb_list_supervisors_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        data = await self._api_get('/api/supervisors?limit=10') or []
        lines: List[str] = ['–ù–∞—É—á–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏:']
        kb: List[List[InlineKeyboardButton]] = [[InlineKeyboardButton('‚ûï –ù–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', callback_data='add_supervisor')]]
        for s in data:
            lines.append(f"‚Ä¢ {s.get('full_name','‚Äì')} (id={s.get('id')})")
            kb.append([InlineKeyboardButton((s.get('full_name','‚Äì')[:30]), callback_data=f"supervisor_{s.get('id')}")])
        kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        await q.edit_message_text(self._fix_text('\n'.join(lines)), reply_markup=self._mk(kb))

    async def cb_list_topics_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        data = await self._api_get('/api/topics?limit=10') or []
        lines: List[str] = ['–¢–µ–º—ã:']
        kb: List[List[InlineKeyboardButton]] = [[InlineKeyboardButton('‚ûï –¢–µ–º–∞', callback_data='add_topic')]]
        for t in data:
            lines.append(f"‚Ä¢ {t.get('title','‚Äì')} (id={t.get('id')})")
            kb.append([InlineKeyboardButton(((t.get('title') or '‚Äì')[:30]), callback_data=f"topic_{t.get('id')}")])
        kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        await q.edit_message_text(self._fix_text('\n'.join(lines)), reply_markup=self._mk(kb))

    # List menus with pagination navigation
    async def cb_list_students_nav(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        offset = 0
        try:
            if '_' in (q.data or '') and q.data != 'list_students':
                offset = int(q.data.rsplit('_', 1)[1])
        except Exception:
            offset = 0
        limit = 10
        data = await self._api_get(f'/api/students?limit={limit}&offset={max(0, offset)}') or []
        lines: List[str] = ['–°—Ç—É–¥–µ–Ω—Ç—ã:']
        kb: List[List[InlineKeyboardButton]] = [
            [InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞', callback_data='add_student')],
            [InlineKeyboardButton('üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Google-—Ç–∞–±–ª–∏—Ü', callback_data='import_students')],
        ]
        for s in data:
            lines.append(f"‚Ä¢ {s.get('full_name','‚Äì')} (id={s.get('id')})")
            kb.append([InlineKeyboardButton((s.get('full_name','‚Äì')[:30]), callback_data=f"student_{s.get('id')}")])
        nav: List[InlineKeyboardButton] = []
        if offset > 0:
            prev_off = max(0, offset - limit)
            nav.append(InlineKeyboardButton('‚óÄÔ∏è', callback_data=f'list_students_{prev_off}'))
        if len(data) == limit:
            next_off = offset + limit
            nav.append(InlineKeyboardButton('‚ñ∂Ô∏è', callback_data=f'list_students_{next_off}'))
        if nav:
            kb.append(nav)
        kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        await q.edit_message_text(self._fix_text('\n'.join(lines)), reply_markup=self._mk(kb))

    async def cb_list_supervisors_nav(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        offset = 0
        try:
            if '_' in (q.data or '') and q.data != 'list_supervisors':
                offset = int(q.data.rsplit('_', 1)[1])
        except Exception:
            offset = 0
        limit = 10
        data = await self._api_get(f'/api/supervisors?limit={limit}&offset={max(0, offset)}') or []
        lines: List[str] = ['–ù–∞—É—á–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏:']
        kb: List[List[InlineKeyboardButton]] = [[InlineKeyboardButton('‚ûï –ù–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', callback_data='add_supervisor')]]
        for s in data:
            lines.append(f"‚Ä¢ {s.get('full_name','‚Äì')} (id={s.get('id')})")
            kb.append([InlineKeyboardButton((s.get('full_name','‚Äì')[:30]), callback_data=f"supervisor_{s.get('id')}")])
        nav: List[InlineKeyboardButton] = []
        if offset > 0:
            prev_off = max(0, offset - limit)
            nav.append(InlineKeyboardButton('‚óÄÔ∏è', callback_data=f'list_supervisors_{prev_off}'))
        if len(data) == limit:
            next_off = offset + limit
            nav.append(InlineKeyboardButton('‚ñ∂Ô∏è', callback_data=f'list_supervisors_{next_off}'))
        if nav:
            kb.append(nav)
        kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        await q.edit_message_text(self._fix_text('\n'.join(lines)), reply_markup=self._mk(kb))

    async def cb_list_topics_nav(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        offset = 0
        try:
            if '_' in (q.data or '') and q.data != 'list_topics':
                offset = int(q.data.rsplit('_', 1)[1])
        except Exception:
            offset = 0
        limit = 10
        data = await self._api_get(f'/api/topics?limit={limit}&offset={max(0, offset)}') or []
        lines: List[str] = ['–¢–µ–º—ã:']
        kb: List[List[InlineKeyboardButton]] = [[InlineKeyboardButton('‚ûï –¢–µ–º–∞', callback_data='add_topic')]]
        for t in data:
            title = (t.get('title') or '‚Äì')[:30]
            lines.append(f"‚Ä¢ {t.get('title','‚Äì')} (id={t.get('id')})")
            kb.append([InlineKeyboardButton(title, callback_data=f"topic_{t.get('id')}")])
        nav: List[InlineKeyboardButton] = []
        if offset > 0:
            prev_off = max(0, offset - limit)
            nav.append(InlineKeyboardButton('‚óÄÔ∏è', callback_data=f'list_topics_{prev_off}'))
        if len(data) == limit:
            next_off = offset + limit
            nav.append(InlineKeyboardButton('‚ñ∂Ô∏è', callback_data=f'list_topics_{next_off}'))
        if nav:
            kb.append(nav)
        kb.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        await q.edit_message_text(self._fix_text('\n'.join(lines)), reply_markup=self._mk(kb))

    # Add flows (simple)
    async def cb_add_student_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        text = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ Google-—Ñ–æ—Ä–º—É –∏ –∏–º–ø–æ—Ä—Ç –≤ –∞–¥–º–∏–Ω–∫–µ.'
        kb = [[InlineKeyboardButton('üë®‚Äçüéì –ö —Å—Ç—É–¥–µ–Ω—Ç–∞–º', callback_data='list_students')]]
        await q.edit_message_text(self._fix_text(text), reply_markup=self._mk(kb))

    async def cb_add_supervisor_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        context.user_data['awaiting'] = 'add_supervisor_name'
        await q.edit_message_text(self._fix_text('–í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /start'))

    async def cb_add_topic_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        context.user_data['add_topic_payload'] = {}
        context.user_data['add_topic_endpoint'] = None
        kb = [
            [InlineKeyboardButton('üéì –ò—â—É —Å—Ç—É–¥–µ–Ω—Ç–∞', callback_data='add_topic_role_student')],
            [InlineKeyboardButton('üßë‚Äçüè´ –ò—â—É –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è', callback_data='add_topic_role_supervisor')],
            [InlineKeyboardButton('üìö –ö —Ç–µ–º–∞–º', callback_data='list_topics')],
        ]
        await q.edit_message_text(self._fix_text('–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –∏—â–µ—Ç —Ç–µ–º–∞:'), reply_markup=self._mk(kb))

    async def cb_add_topic_choose(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        role = 'student' if q.data.endswith('_student') else 'supervisor'
        context.user_data['awaiting'] = 'add_topic_title'
        context.user_data['topic_role'] = role
        payload = context.user_data.get('add_topic_payload') or {}
        payload['seeking_role'] = role
        context.user_data['add_topic_payload'] = payload
        await q.edit_message_text(
            self._fix_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã —É—Ç–æ—á–Ω–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /start')
        )

    async def cb_add_role_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query; await self._answer_callback(q)
        try:
            tid = int(q.data.rsplit('_', 1)[1])
        except Exception:
            await q.edit_message_text(self._fix_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏.'))
            return
        topic = await self._api_get(f'/api/topics/{tid}')
        if not topic:
            await q.edit_message_text(self._fix_text('–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'))
            return
        author_id = topic.get('author_user_id')
        uid = context.user_data.get('uid')
        allowed = False
        if self._is_admin(update):
            allowed = True
        elif uid is not None and author_id is not None:
            try:
                allowed = int(author_id) == int(uid)
            except Exception:
                allowed = author_id == uid
        if not allowed:
            try:
                await self._answer_callback(q, text=self._fix_text('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–æ–ª–∏ –∫ —ç—Ç–æ–π —Ç–µ–º–µ.'), show_alert=True)
            except Exception:
                pass
            return
        context.user_data['awaiting'] = 'add_role_name'
        context.user_data['add_role_topic_id'] = tid
        context.user_data['add_role_payload'] = {}
        context.user_data['add_role_topic_title'] = topic.get('title')
        prompt = f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–ª—è —Ç–µ–º—ã ¬´{topic.get('title','‚Äì')}¬ª. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /start"
        await q.edit_message_text(self._fix_text(prompt))

    async def on_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        awaiting = context.user_data.get('awaiting')
        if not awaiting:
            return
        text = (update.message.text or '').strip()

        if awaiting == 'submit_application_body':
            payload = context.user_data.get('application_payload') or {}
            if not payload:
                context.user_data['awaiting'] = None
                await update.message.reply_text(
                    self._fix_text('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å–±—Ä–æ—à–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç—å —Ä–æ–ª—å –∏–ª–∏ —Ç–µ–º—É.')
                )
                return
            body_text = text
            if self._should_skip_optional(body_text):
                body_text = payload.get('default_body') or ''
            if not body_text or not body_text.strip():
                await update.message.reply_text(
                    self._fix_text('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ /start –¥–ª—è –æ—Ç–º–µ–Ω—ã.')
                )
                return
            data = {
                'sender_user_id': payload.get('sender_user_id'),
                'receiver_user_id': payload.get('receiver_user_id'),
                'body': body_text.strip(),
            }
            topic_id_value = payload.get('topic_id')
            if topic_id_value is not None:
                data['topic_id'] = topic_id_value
            role_id = payload.get('role_id')
            if role_id:
                data['role_id'] = role_id
            res = await self._api_post('/api/messages/send', data=data)
            if not res or res.get('status') != 'ok':
                msg = (res or {}).get('message') or '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
                await update.message.reply_text(self._fix_text(msg))
                return
            context.user_data['awaiting'] = None
            payload_copy = dict(payload)
            context.user_data.pop('application_payload', None)
            message_id = res.get('message_id')
            try:
                uid = context.user_data.get('uid')
                if uid is not None and message_id is not None:
                    mid_int = int(message_id)
                    await self._get_message_details(context, uid, mid_int, refresh=True)
            except Exception:
                pass
            source = payload_copy.get('source')
            if source == 'supervisor_invite':
                success_lines = ['‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.']
            else:
                success_lines = ['‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.']
            if message_id is not None:
                success_lines.append(f'–ù–æ–º–µ—Ä: #{message_id}')
            receiver_name = payload_copy.get('receiver_name')
            if receiver_name:
                success_lines.append(f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {receiver_name}')
            role_name = payload_copy.get('role_name')
            if role_name:
                success_lines.append(f'–†–æ–ª—å: {role_name}')
            topic_title = payload_copy.get('topic_title')
            if topic_title:
                success_lines.append(f'–¢–µ–º–∞: {topic_title}')
            kb: List[List[InlineKeyboardButton]] = []
            return_cb = payload_copy.get('return_callback')
            if return_cb:
                if source == 'role':
                    label = '‚¨ÖÔ∏è –ö —Ä–æ–ª–∏'
                elif source == 'supervisor_invite':
                    label = '‚¨ÖÔ∏è –ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é'
                else:
                    label = '‚¨ÖÔ∏è –ö —Ç–µ–º–µ'
                kb.append([InlineKeyboardButton(label, callback_data=return_cb)])
            kb.append([InlineKeyboardButton('üì§ –ú–æ–∏ –∑–∞—è–≤–∫–∏', callback_data='messages_outbox')])
            await update.message.reply_text(
                self._fix_text('\n'.join(success_lines)),
                reply_markup=self._mk(kb),
            )
            return

        if awaiting == 'add_supervisor_name':
            payload = {
                'full_name': text,
                'email': None,
                'username': getattr(update.effective_user, 'username', None) or None,
            }
            res = await self._api_post('/add-supervisor', data=payload)
            context.user_data['awaiting'] = None
            if res and res.get('status', 'success') in ('success', 'ok'):
                await update.message.reply_text(
                    self._fix_text('–ù–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.'),
                    reply_markup=self._mk([[InlineKeyboardButton('üßë‚Äçüè´ –ö –Ω–∞—É—á–Ω—ã–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º', callback_data='list_supervisors')]]),
                )
            else:
                await update.message.reply_text(
                    self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∞–¥–º–∏–Ω–∫—É.')
                )
            return

        if awaiting == 'add_topic_title':
            if not text:
                await update.message.reply_text(
                    self._fix_text('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ /start –¥–ª—è –æ—Ç–º–µ–Ω—ã.')
                )
                return
            payload: Dict[str, Any] = context.user_data.get('add_topic_payload') or {}
            payload['title'] = text
            role = context.user_data.get('topic_role') or 'student'
            payload['seeking_role'] = role
            uid = context.user_data.get('uid')
            if uid is not None:
                payload['author_user_id'] = str(uid)
                context.user_data['add_topic_endpoint'] = '/api/add-topic'
            else:
                context.user_data['add_topic_endpoint'] = '/add-topic'
                payload['author_full_name'] = getattr(update.effective_user, 'full_name', None) or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'
            context.user_data['add_topic_payload'] = payload
            context.user_data['awaiting'] = 'add_topic_description'
            await update.message.reply_text(
                self._fix_text('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã (–∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).')
            )
            return

        if awaiting == 'add_topic_description':
            payload = context.user_data.get('add_topic_payload') or {}
            payload['description'] = '' if self._should_skip_optional(text) else text
            context.user_data['add_topic_payload'] = payload
            context.user_data['awaiting'] = 'add_topic_expected'
            await update.message.reply_text(
                self._fix_text('–£–∫–∞–∂–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).')
            )
            return

        if awaiting == 'add_topic_expected':
            payload = context.user_data.get('add_topic_payload') or {}
            payload['expected_outcomes'] = '' if self._should_skip_optional(text) else text
            context.user_data['add_topic_payload'] = payload
            context.user_data['awaiting'] = 'add_topic_skills'
            await update.message.reply_text(
                self._fix_text('–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏ (–∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).')
            )
            return

        if awaiting == 'add_topic_skills':
            payload = context.user_data.get('add_topic_payload') or {}
            payload['required_skills'] = '' if self._should_skip_optional(text) else text
            context.user_data['add_topic_payload'] = payload
            context.user_data['awaiting'] = 'add_topic_direction'
            await update.message.reply_text(
                self._fix_text('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Ü–∏—Ñ—Ä–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä 9, –∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).')
            )
            return

        if awaiting == 'add_topic_direction':
            payload = context.user_data.get('add_topic_payload') or {}
            if self._should_skip_optional(text):
                payload['direction'] = ''
            else:
                if not text.isdigit():
                    await update.message.reply_text(
                        self._fix_text('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ "-".')
                    )
                    return
                payload['direction'] = text
            context.user_data['add_topic_payload'] = payload
            await self._finish_add_topic(update, context)
            return

        if awaiting == 'add_role_name':
            if not text:
                await update.message.reply_text(
                    self._fix_text('–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ /start –¥–ª—è –æ—Ç–º–µ–Ω—ã.')
                )
                return
            payload = context.user_data.get('add_role_payload') or {}
            payload['name'] = text
            context.user_data['add_role_payload'] = payload
            context.user_data['awaiting'] = 'add_role_description'
            await update.message.reply_text(self._fix_text('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ (–∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).'))
            return

        if awaiting == 'add_role_description':
            payload = context.user_data.get('add_role_payload') or {}
            payload['description'] = None if self._should_skip_optional(text) else text
            context.user_data['add_role_payload'] = payload
            context.user_data['awaiting'] = 'add_role_skills'
            await update.message.reply_text(self._fix_text('–£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏ (–∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).'))
            return

        if awaiting == 'add_role_skills':
            payload = context.user_data.get('add_role_payload') or {}
            payload['required_skills'] = None if self._should_skip_optional(text) else text
            context.user_data['add_role_payload'] = payload
            context.user_data['awaiting'] = 'add_role_capacity'
            await update.message.reply_text(
                self._fix_text('–£–∫–∞–∂–∏—Ç–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–æ–ª–∏ —á–∏—Å–ª–æ–º (–∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).')
            )
            return

        if awaiting == 'add_role_capacity':
            payload = context.user_data.get('add_role_payload') or {}
            if self._should_skip_optional(text):
                capacity_val: Optional[int] = None
            else:
                try:
                    capacity_val = int(text)
                    if capacity_val < 0:
                        raise ValueError('negative capacity')
                except Exception:
                    await update.message.reply_text(
                        self._fix_text('–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.')
                    )
                    return
            payload['capacity'] = capacity_val
            context.user_data['add_role_payload'] = payload
            topic_id = context.user_data.get('add_role_topic_id')
            topic_title = context.user_data.get('add_role_topic_title')
            if not topic_id or not payload.get('name'):
                context.user_data['awaiting'] = None
                context.user_data.pop('add_role_payload', None)
                context.user_data.pop('add_role_topic_id', None)
                context.user_data.pop('add_role_topic_title', None)
                await update.message.reply_text(
                    self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–º—É –¥–ª—è —Ä–æ–ª–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start.')
                )
                return
            data = {
                'topic_id': str(topic_id),
                'name': payload.get('name').strip(),
            }
            if payload.get('description'):
                data['description'] = payload['description']
            if payload.get('required_skills'):
                data['required_skills'] = payload['required_skills']
            if payload.get('capacity') is not None:
                data['capacity'] = str(payload['capacity'])
            res = await self._api_post('/api/add-role', data=data)
            context.user_data['awaiting'] = None
            context.user_data.pop('add_role_payload', None)
            context.user_data.pop('add_role_topic_id', None)
            context.user_data.pop('add_role_topic_title', None)
            if not res or res.get('status') not in ('ok', 'success'):
                await update.message.reply_text(
                    self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∞–¥–º–∏–Ω–∫—É.')
                )
                return
            kb = [[InlineKeyboardButton('üìö –ö —Ç–µ–º–µ', callback_data=f'topic_{topic_id}')]]
            role_name = payload.get('name')
            topic_str = topic_title or f'#{topic_id}'
            msg = f'–†–æ–ª—å "{role_name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Ç–µ–º–µ ¬´{topic_str}¬ª.'
            await update.message.reply_text(self._fix_text(msg), reply_markup=self._mk(kb))
            return

        if awaiting == 'edit_student_program':
            payload = context.user_data.get('edit_student_payload') or {}
            value = self._normalize_edit_input(text)
            payload['program'] = value
            context.user_data['edit_student_payload'] = payload
            context.user_data['awaiting'] = 'edit_student_skills'
            original = context.user_data.get('edit_student_original') or {}
            prompt = (
                f"–ù–∞–≤—ã–∫–∏ (—Å–µ–π—á–∞—Å: {original.get('skills') or '‚Äì'}).\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
            )
            await update.message.reply_text(self._fix_text(prompt))
            return

        if awaiting == 'edit_student_skills':
            payload = context.user_data.get('edit_student_payload') or {}
            value = self._normalize_edit_input(text)
            payload['skills'] = value
            context.user_data['edit_student_payload'] = payload
            context.user_data['awaiting'] = 'edit_student_interests'
            original = context.user_data.get('edit_student_original') or {}
            prompt = (
                f"–ò–Ω—Ç–µ—Ä–µ—Å—ã (—Å–µ–π—á–∞—Å: {original.get('interests') or '‚Äì'}).\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
            )
            await update.message.reply_text(self._fix_text(prompt))
            return

        if awaiting == 'edit_student_interests':
            payload = context.user_data.get('edit_student_payload') or {}
            value = self._normalize_edit_input(text)
            payload['interests'] = value
            context.user_data['edit_student_payload'] = payload
            context.user_data['awaiting'] = 'edit_student_cv'
            original = context.user_data.get('edit_student_original') or {}
            prompt = (
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ CV (—Å–µ–π—á–∞—Å: {(original.get('cv') or '‚Äì')[:200]}).\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
            )
            await update.message.reply_text(self._fix_text(prompt))
            return

        if awaiting == 'edit_student_cv':
            payload = context.user_data.get('edit_student_payload') or {}
            value = self._normalize_edit_input(text)
            payload['cv'] = value
            context.user_data['edit_student_payload'] = payload
            await self._finish_edit_student(update, context)
            return

        if awaiting == 'edit_supervisor_position':
            payload = context.user_data.get('edit_supervisor_payload') or {}
            value = self._normalize_edit_input(text)
            payload['position'] = value
            context.user_data['edit_supervisor_payload'] = payload
            context.user_data['awaiting'] = 'edit_supervisor_degree'
            original = context.user_data.get('edit_supervisor_original') or {}
            prompt = (
                f"–£—á—ë–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å (—Å–µ–π—á–∞—Å: {original.get('degree') or '‚Äì'}).\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
            )
            await update.message.reply_text(self._fix_text(prompt))
            return

        if awaiting == 'edit_supervisor_degree':
            payload = context.user_data.get('edit_supervisor_payload') or {}
            value = self._normalize_edit_input(text)
            payload['degree'] = value
            context.user_data['edit_supervisor_payload'] = payload
            context.user_data['awaiting'] = 'edit_supervisor_capacity'
            original = context.user_data.get('edit_supervisor_original') or {}
            prompt = (
                f"–õ–∏–º–∏—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (—Å–µ–π—á–∞—Å: {original.get('capacity') or '‚Äì'}).\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ, ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
            )
            await update.message.reply_text(self._fix_text(prompt))
            return

        if awaiting == 'edit_supervisor_capacity':
            payload = context.user_data.get('edit_supervisor_payload') or {}
            value = self._normalize_edit_input(text)
            if value not in (self.EDIT_KEEP, None):
                try:
                    int(str(value))
                except Exception:
                    await update.message.reply_text(
                        self._fix_text('–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –∏–ª–∏ ¬´-¬ª.')
                    )
                    return
            payload['capacity'] = value
            context.user_data['edit_supervisor_payload'] = payload
            context.user_data['awaiting'] = 'edit_supervisor_interests'
            original = context.user_data.get('edit_supervisor_original') or {}
            prompt = (
                f"–ò–Ω—Ç–µ—Ä–µ—Å—ã (—Å–µ–π—á–∞—Å: {original.get('interests') or '‚Äì'}).\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
            )
            await update.message.reply_text(self._fix_text(prompt))
            return

        if awaiting == 'edit_supervisor_interests':
            payload = context.user_data.get('edit_supervisor_payload') or {}
            value = self._normalize_edit_input(text)
            payload['interests'] = value
            context.user_data['edit_supervisor_payload'] = payload
            context.user_data['awaiting'] = 'edit_supervisor_requirements'
            original = context.user_data.get('edit_supervisor_original') or {}
            prompt = (
                f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è (—Å–µ–π—á–∞—Å: {original.get('requirements') or '‚Äì'}).\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
            )
            await update.message.reply_text(self._fix_text(prompt))
            return

        if awaiting == 'edit_supervisor_requirements':
            payload = context.user_data.get('edit_supervisor_payload') or {}
            value = self._normalize_edit_input(text)
            payload['requirements'] = value
            context.user_data['edit_supervisor_payload'] = payload
            await self._finish_edit_supervisor(update, context)
            return

        if awaiting == 'edit_topic_title':
            payload = context.user_data.get('edit_topic_payload') or {}
            value = self._normalize_edit_input(text)
            if value is None:
                await update.message.reply_text(
                    self._fix_text('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.')
                )
                return
            payload['title'] = value
            context.user_data['edit_topic_payload'] = payload
            context.user_data['awaiting'] = 'edit_topic_description'
            original = context.user_data.get('edit_topic_original') or {}
            prompt = (
                f"–û–ø–∏—Å–∞–Ω–∏–µ (—Å–µ–π—á–∞—Å: {(original.get('description') or '‚Äì')[:300]}).\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
            )
            await update.message.reply_text(self._fix_text(prompt))
            return

        if awaiting == 'edit_topic_description':
            payload = context.user_data.get('edit_topic_payload') or {}
            value = self._normalize_edit_input(text)
            payload['description'] = value
            context.user_data['edit_topic_payload'] = payload
            context.user_data['awaiting'] = 'edit_topic_expected'
            original = context.user_data.get('edit_topic_original') or {}
            prompt = (
                f"–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Å–µ–π—á–∞—Å: {(original.get('expected_outcomes') or '‚Äì')[:300]}).\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
            )
            await update.message.reply_text(self._fix_text(prompt))
            return

        if awaiting == 'edit_topic_expected':
            payload = context.user_data.get('edit_topic_payload') or {}
            value = self._normalize_edit_input(text)
            payload['expected_outcomes'] = value
            context.user_data['edit_topic_payload'] = payload
            context.user_data['awaiting'] = 'edit_topic_skills'
            original = context.user_data.get('edit_topic_original') or {}
            prompt = (
                f"–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏ (—Å–µ–π—á–∞—Å: {original.get('required_skills') or '‚Äì'}).\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
            )
            await update.message.reply_text(self._fix_text(prompt))
            return

        if awaiting == 'edit_topic_skills':
            payload = context.user_data.get('edit_topic_payload') or {}
            value = self._normalize_edit_input(text)
            payload['required_skills'] = value
            context.user_data['edit_topic_payload'] = payload
            context.user_data['awaiting'] = 'edit_topic_direction'
            original = context.user_data.get('edit_topic_original') or {}
            prompt = (
                f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Å–µ–π—á–∞—Å: {original.get('direction') or '‚Äì'}).\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ."
            )
            await update.message.reply_text(self._fix_text(prompt))
            return

        if awaiting == 'edit_topic_direction':
            payload = context.user_data.get('edit_topic_payload') or {}
            value = self._normalize_edit_input(text)
            if value not in (self.EDIT_KEEP, None):
                if not str(value).isdigit():
                    await update.message.reply_text(
                        self._fix_text('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –∏–ª–∏ ¬´-¬ª.')
                    )
                    return
            payload['direction'] = value
            context.user_data['edit_topic_payload'] = payload
            context.user_data['awaiting'] = 'edit_topic_seeking_role'
            original = context.user_data.get('edit_topic_original') or {}
            prompt = (
                f"–ö–æ–≥–æ –∏—â–µ—Ç —Ç–µ–º–∞ (—Å–µ–π—á–∞—Å: {original.get('seeking_role') or 'student'}).\n"
                "–í–≤–µ–¥–∏—Ç–µ student/supervisor –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
            )
            await update.message.reply_text(self._fix_text(prompt))
            return

        if awaiting == 'edit_topic_seeking_role':
            payload = context.user_data.get('edit_topic_payload') or {}
            lowered = text.strip().lower()
            if not lowered or lowered in {'–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '–æ—Å—Ç–∞–≤–∏—Ç—å', '–Ω–µ –º–µ–Ω—è—Ç—å'}:
                payload['seeking_role'] = self.EDIT_KEEP
            else:
                role_val = self._normalize_role_value(text)
                if not role_val:
                    await update.message.reply_text(
                        self._fix_text('–£–∫–∞–∂–∏—Ç–µ ¬´student¬ª –∏–ª–∏ ¬´supervisor¬ª, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.')
                    )
                    return
                payload['seeking_role'] = role_val
            context.user_data['edit_topic_payload'] = payload
            await self._finish_edit_topic(update, context)
            return

        if awaiting == 'edit_role_name':
            payload = context.user_data.get('edit_role_payload') or {}
            value = self._normalize_edit_input(text)
            if value is None:
                await update.message.reply_text(
                    self._fix_text('–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.')
                )
                return
            payload['name'] = value
            context.user_data['edit_role_payload'] = payload
            context.user_data['awaiting'] = 'edit_role_description'
            original = context.user_data.get('edit_role_original') or {}
            prompt = (
                f"–û–ø–∏—Å–∞–Ω–∏–µ (—Å–µ–π—á–∞—Å: {(original.get('description') or '‚Äì')[:300]}).\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
            )
            await update.message.reply_text(self._fix_text(prompt))
            return

        if awaiting == 'edit_role_description':
            payload = context.user_data.get('edit_role_payload') or {}
            value = self._normalize_edit_input(text)
            payload['description'] = value
            context.user_data['edit_role_payload'] = payload
            context.user_data['awaiting'] = 'edit_role_required'
            original = context.user_data.get('edit_role_original') or {}
            prompt = (
                f"–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏ (—Å–µ–π—á–∞—Å: {original.get('required_skills') or '‚Äì'}).\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
            )
            await update.message.reply_text(self._fix_text(prompt))
            return

        if awaiting == 'edit_role_required':
            payload = context.user_data.get('edit_role_payload') or {}
            value = self._normalize_edit_input(text)
            payload['required_skills'] = value
            context.user_data['edit_role_payload'] = payload
            context.user_data['awaiting'] = 'edit_role_capacity'
            original = context.user_data.get('edit_role_original') or {}
            prompt = (
                f"–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (—Å–µ–π—á–∞—Å: {original.get('capacity') or '‚Äì'}).\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –∏–ª–∏ ¬´-¬ª/¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å."
            )
            await update.message.reply_text(self._fix_text(prompt))
            return

        if awaiting == 'edit_role_capacity':
            payload = context.user_data.get('edit_role_payload') or {}
            value = self._normalize_edit_input(text)
            if value not in (self.EDIT_KEEP, None):
                try:
                    int(str(value))
                except Exception:
                    await update.message.reply_text(
                        self._fix_text('–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –∏–ª–∏ ¬´-¬ª.')
                    )
                    return
            payload['capacity'] = value
            context.user_data['edit_role_payload'] = payload
            await self._finish_edit_role(update, context)
            return

        context.user_data['awaiting'] = None
        await update.message.reply_text(self._fix_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start.'))

    async def _finish_add_topic(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        payload: Dict[str, Any] = context.user_data.get('add_topic_payload') or {}
        endpoint = context.user_data.get('add_topic_endpoint') or '/api/add-topic'
        data: Dict[str, Any] = {}
        for key, value in payload.items():
            if value is None:
                continue
            if isinstance(value, int):
                data[key] = str(value)
            else:
                data[key] = value
        res = await self._api_post(endpoint, data=data)
        context.user_data['awaiting'] = None
        context.user_data.pop('topic_role', None)
        context.user_data.pop('add_topic_payload', None)
        context.user_data.pop('add_topic_endpoint', None)
        if not res:
            await update.message.reply_text(
                self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∞–¥–º–∏–Ω–∫—É.')
            )
            return
        status = (res.get('status') or '').lower()
        if status in {'ok', 'success'}:
            duplicate = (res.get('message') == 'duplicate')
            topic_id_raw = res.get('topic_id')
            topic_id: Optional[int]
            if isinstance(topic_id_raw, int):
                topic_id = topic_id_raw
            else:
                try:
                    topic_id = int(str(topic_id_raw))
                except Exception:
                    topic_id = None
            kb: List[List[InlineKeyboardButton]] = [[InlineKeyboardButton('üìö –ú–æ–∏ —Ç–µ–º—ã', callback_data='my_topics')]]
            if topic_id:
                kb.insert(0, [InlineKeyboardButton('üîç –û—Ç–∫—Ä—ã—Ç—å —Ç–µ–º—É', callback_data=f'topic_{topic_id}')])
            elif endpoint == '/add-topic':
                kb.insert(0, [InlineKeyboardButton('üìö –ö —Ç–µ–º–∞–º', callback_data='list_topics')])
            msg = '–¢–∞–∫–∞—è —Ç–µ–º–∞ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å.' if duplicate else '–¢–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.'
            await update.message.reply_text(self._fix_text(msg), reply_markup=self._mk(kb))
        else:
            await update.message.reply_text(
                self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∞–¥–º–∏–Ω–∫—É.')
            )

    async def _finish_edit_student(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        payload = context.user_data.get('edit_student_payload') or {}
        user_id = payload.get('user_id')
        if user_id is None:
            context.user_data['awaiting'] = None
            return
        data: Dict[str, Any] = {'user_id': str(user_id)}
        for key in ('program', 'skills', 'interests', 'cv'):
            value = payload.get(key, self.EDIT_KEEP)
            if value == self.EDIT_KEEP:
                continue
            if value is None:
                data[key] = ''
            else:
                data[key] = value
        res = await self._api_post('/api/update-student-profile', data=data)
        context.user_data['awaiting'] = None
        context.user_data.pop('edit_student_payload', None)
        context.user_data.pop('edit_student_original', None)
        if not res or res.get('status') != 'ok':
            await update.message.reply_text(self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'))
            return
        kb = [[InlineKeyboardButton('üë§ –ö –ø—Ä–æ—Ñ–∏–ª—é', callback_data=f'student_{user_id}')]]
        await update.message.reply_text(
            self._fix_text('–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.'), reply_markup=self._mk(kb)
        )

    async def _finish_edit_supervisor(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        payload = context.user_data.get('edit_supervisor_payload') or {}
        user_id = payload.get('user_id')
        if user_id is None:
            context.user_data['awaiting'] = None
            return
        data: Dict[str, Any] = {'user_id': str(user_id)}
        for key in ('position', 'degree', 'interests', 'requirements'):
            value = payload.get(key, self.EDIT_KEEP)
            if value == self.EDIT_KEEP:
                continue
            if value is None:
                data[key] = ''
            else:
                data[key] = value
        capacity_value = payload.get('capacity', self.EDIT_KEEP)
        if capacity_value != self.EDIT_KEEP:
            if capacity_value is None:
                data['capacity'] = ''
            else:
                data['capacity'] = str(capacity_value)
        res = await self._api_post('/api/update-supervisor-profile', data=data)
        context.user_data['awaiting'] = None
        context.user_data.pop('edit_supervisor_payload', None)
        context.user_data.pop('edit_supervisor_original', None)
        if not res or res.get('status') != 'ok':
            await update.message.reply_text(self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'))
            return
        kb = [[InlineKeyboardButton('üë§ –ö –ø—Ä–æ—Ñ–∏–ª—é', callback_data=f'supervisor_{user_id}')]]
        await update.message.reply_text(
            self._fix_text('–ü—Ä–æ—Ñ–∏–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω.'), reply_markup=self._mk(kb)
        )

    async def _finish_edit_topic(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        payload = context.user_data.get('edit_topic_payload') or {}
        original = context.user_data.get('edit_topic_original') or {}
        topic_id = payload.get('topic_id')
        if topic_id is None:
            context.user_data['awaiting'] = None
            return
        data: Dict[str, Any] = {'topic_id': str(topic_id)}
        editor = payload.get('editor_user_id')
        if editor:
            data['editor_user_id'] = str(editor)
        title_value = payload.get('title', self.EDIT_KEEP)
        if title_value == self.EDIT_KEEP:
            data['title'] = original.get('title') or ''
        elif title_value is None:
            await update.message.reply_text(self._fix_text('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.'))
            return
        else:
            data['title'] = title_value
        if not data['title']:
            await update.message.reply_text(self._fix_text('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.'))
            return
        for key in ('description', 'expected_outcomes', 'required_skills'):
            value = payload.get(key, self.EDIT_KEEP)
            if value == self.EDIT_KEEP:
                continue
            if value is None:
                data[key] = ''
            else:
                data[key] = value
        direction_value = payload.get('direction', self.EDIT_KEEP)
        if direction_value != self.EDIT_KEEP:
            data['direction'] = '' if direction_value is None else str(direction_value)
        role_value = payload.get('seeking_role', self.EDIT_KEEP)
        if role_value != self.EDIT_KEEP and role_value:
            data['seeking_role'] = role_value
        res = await self._api_post('/api/update-topic', data=data)
        context.user_data['awaiting'] = None
        context.user_data.pop('edit_topic_payload', None)
        context.user_data.pop('edit_topic_original', None)
        if not res or res.get('status') != 'ok':
            await update.message.reply_text(self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'))
            return
        kb = [[InlineKeyboardButton('üìö –ö —Ç–µ–º–µ', callback_data=f'topic_{topic_id}')]]
        await update.message.reply_text(self._fix_text('–¢–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.'), reply_markup=self._mk(kb))

    async def _finish_edit_role(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        payload = context.user_data.get('edit_role_payload') or {}
        original = context.user_data.get('edit_role_original') or {}
        role_id = payload.get('role_id')
        if role_id is None:
            context.user_data['awaiting'] = None
            return
        data: Dict[str, Any] = {'role_id': str(role_id)}
        editor = payload.get('editor_user_id')
        if editor:
            data['editor_user_id'] = str(editor)
        name_value = payload.get('name', self.EDIT_KEEP)
        if name_value == self.EDIT_KEEP:
            data['name'] = original.get('name') or ''
        elif name_value is None:
            await update.message.reply_text(self._fix_text('–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.'))
            return
        else:
            data['name'] = name_value
        if not data['name']:
            await update.message.reply_text(self._fix_text('–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.'))
            return
        for key in ('description', 'required_skills'):
            value = payload.get(key, self.EDIT_KEEP)
            if value == self.EDIT_KEEP:
                continue
            if value is None:
                data[key] = ''
            else:
                data[key] = value
        capacity_value = payload.get('capacity', self.EDIT_KEEP)
        if capacity_value != self.EDIT_KEEP:
            data['capacity'] = '' if capacity_value is None else str(capacity_value)
        res = await self._api_post('/api/update-role', data=data)
        context.user_data['awaiting'] = None
        context.user_data.pop('edit_role_payload', None)
        context.user_data.pop('edit_role_original', None)
        if not res or res.get('status') != 'ok':
            await update.message.reply_text(self._fix_text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'))
            return
        topic_id = original.get('topic_id')
        kb: List[List[InlineKeyboardButton]] = [[InlineKeyboardButton('üé≠ –ö —Ä–æ–ª–∏', callback_data=f'role_{role_id}')]]
        if topic_id:
            kb.append([InlineKeyboardButton('üìö –ö —Ç–µ–º–µ', callback_data=f'topic_{topic_id}')])
        await update.message.reply_text(
            self._fix_text('–†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.'), reply_markup=self._mk(kb)
        )

