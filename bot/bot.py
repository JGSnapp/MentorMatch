import os
import logging
import aiohttp
import asyncio
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_ACTION, ADDING_TOPIC, ADDING_SUPERVISOR, IMPORTING_SHEET = range(4)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã
TOPIC_TITLE, TOPIC_DESCRIPTION, TOPIC_OUTCOMES, TOPIC_SKILLS, TOPIC_ROLE = range(4, 9)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—É—á—Ä—É–∫–∞
SUPERVISOR_NAME, SUPERVISOR_EMAIL, SUPERVISOR_USERNAME, SUPERVISOR_POSITION, SUPERVISOR_DEGREE, SUPERVISOR_CAPACITY, SUPERVISOR_REQUIREMENTS, SUPERVISOR_INTERESTS = range(9, 17)

class MentorMatchBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.server_url = os.getenv('SERVER_URL', 'http://localhost:8000')
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_data: Dict[int, Dict[str, Any]] = {}
        
    async def api_request(self, method: str, endpoint: str, data: Optional[Dict] = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.server_url}{endpoint}"
                
                if method.upper() == 'GET':
                    async with session.get(url) as response:
                        if response.status == 200:
                            return await response.json()
                        else:
                            logger.error(f"API GET error: {response.status}")
                            return None
                elif method.upper() == 'POST':
                    async with session.post(url, data=data) as response:
                        if response.status in [200, 303]:
                            return {'status': 'success'}
                        else:
                            logger.error(f"API POST error: {response.status}")
                            return None
        except Exception as e:
            logger.error(f"API request error: {e}")
            return None
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("cancel", self.cancel_command))
        
        # Conversation handler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã
        topic_conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.add_topic_start, pattern='^add_topic$')],
            states={
                TOPIC_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_topic_title)],
                TOPIC_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_topic_description)],
                TOPIC_OUTCOMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_topic_outcomes)],
                TOPIC_SKILLS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_topic_skills)],
                TOPIC_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_topic_role)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel_command)],
        )
        self.application.add_handler(topic_conv_handler)
        
        # Conversation handler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—É—á—Ä—É–∫–∞
        supervisor_conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.add_supervisor_start, pattern='^add_supervisor$')],
            states={
                SUPERVISOR_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_supervisor_name)],
                SUPERVISOR_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_supervisor_email)],
                SUPERVISOR_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_supervisor_username)],
                SUPERVISOR_POSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_supervisor_position)],
                SUPERVISOR_DEGREE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_supervisor_degree)],
                SUPERVISOR_CAPACITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_supervisor_capacity)],
                SUPERVISOR_REQUIREMENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_supervisor_requirements)],
                SUPERVISOR_INTERESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_supervisor_interests)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel_command)],
        )
        self.application.add_handler(supervisor_conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
        topics_data = await self.api_request('GET', '/latest?kind=topics')
        
        keyboard = [
            [InlineKeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", callback_data="add_topic")],
            [InlineKeyboardButton("üë®‚Äçüè´ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—É—á—Ä—É–∫–∞", callback_data="add_supervisor")],
            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", callback_data="find_candidates")],
            [InlineKeyboardButton("üìä –ò–º–ø–æ—Ä—Ç –∏–∑ Google Sheets", callback_data="import_sheet")],
            [InlineKeyboardButton("üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data="view_students")],
            [InlineKeyboardButton("üë®‚Äçüè´ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—É—á—Ä—É–∫–æ–≤", callback_data="view_supervisors")],
            [InlineKeyboardButton("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º—ã", callback_data="view_topics")],
        ]
        
        if topics_data:
            keyboard.append([InlineKeyboardButton("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–º—ã", callback_data="show_topics")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MentorMatch!**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        return CHOOSING_ACTION
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**\n\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
            "**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:**\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Ç–µ–º–∞–º\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–π"
        )
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.user_data:
            del self.user_data[user_id]
        
        await update.message.reply_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardRemove()
        )
        
        return ConversationHandler.END
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "back_to_main":
            await self.start_command(update, context)
            return CHOOSING_ACTION
        elif query.data == "show_topics":
            await self.show_topics(update, context)
        elif query.data.startswith("topic_"):
            topic_id = int(query.data.split("_")[1])
            await self.show_topic_candidates(update, context, topic_id)
        elif query.data == "import_sheet":
            await self.import_sheet_info(update, context)
        elif query.data == "view_students":
            await self.view_students(update, context)
        elif query.data == "view_supervisors":
            await self.view_supervisors(update, context)
        elif query.data == "view_topics":
            await self.view_topics(update, context)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    
    async def show_topics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–º—ã"""
        query = update.callback_query
        
        topics_data = await self.api_request('GET', '/latest?kind=topics')
        
        if not topics_data:
            await query.edit_message_text("üìù –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        text = "üìö **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–º—ã:**\n\n"
        keyboard = []
        
        for topic in topics_data[:10]:
            role_text = "—Å—Ç—É–¥–µ–Ω—Ç–∞" if topic.get('seeking_role') == 'student' else "–Ω–∞—É—á—Ä—É–∫–∞"
            text += f"‚Ä¢ **{topic.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n"
            text += f"  üë• –ò—â–µ–º: {role_text}\n"
            text += f"  üë§ –ê–≤—Ç–æ—Ä: {topic.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            
            keyboard.append([
                InlineKeyboardButton(
                    f"üîç {topic.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:30]}...",
                    callback_data=f"topic_{topic.get('id')}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def show_topic_candidates(self, update: Update, context: ContextTypes.DEFAULT_TYPE, topic_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ç–µ–º—ã"""
        query = update.callback_query
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏–Ω–≥ —Å —Å–µ—Ä–≤–µ—Ä–∞
        match_data = await self.api_request('POST', '/match-topic', {
            'topic_id': str(topic_id),
            'target_role': 'student'
        })
        
        if not match_data or match_data.get('status') != 'ok':
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
            return
        
        topic_title = match_data.get('topic_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞')
        items = match_data.get('items', [])
        
        text = f"üîç **–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è —Ç–µ–º—ã:**\n**{topic_title}**\n\n"
        
        if not items:
            text += "üìù –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            for item in items:
                text += f"**{item.get('rank')}.** {item.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                if item.get('reason'):
                    text += f"   üí° {item.get('reason')}\n"
                text += "\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="show_topics")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def add_topic_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_data:
            self.user_data[user_id] = {}
        self.user_data[user_id]['topic'] = {}
        
        await query.edit_message_text(
            "üìö **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã:",
            parse_mode='Markdown'
        )
        
        return TOPIC_TITLE
    
    async def get_topic_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã"""
        user_id = update.effective_user.id
        title = update.message.text
        
        self.user_data[user_id]['topic']['title'] = title
        
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã:"
        )
        
        return TOPIC_DESCRIPTION
    
    async def get_topic_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã"""
        user_id = update.effective_user.id
        description = update.message.text
        
        self.user_data[user_id]['topic']['description'] = description
        
        await update.message.reply_text(
            "üéØ –í–≤–µ–¥–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        )
        
        return TOPIC_OUTCOMES
    
    async def get_topic_outcomes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        user_id = update.effective_user.id
        outcomes = update.message.text if update.message.text != '–Ω–µ—Ç' else None
        
        self.user_data[user_id]['topic']['expected_outcomes'] = outcomes
        
        await update.message.reply_text(
            "üõ†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏ (–∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        )
        
        return TOPIC_SKILLS
    
    async def get_topic_skills(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏"""
        user_id = update.effective_user.id
        skills = update.message.text if update.message.text != '–Ω–µ—Ç' else None
        
        self.user_data[user_id]['topic']['required_skills'] = skills
        
        keyboard = [
            [KeyboardButton("–°—Ç—É–¥–µ–Ω—Ç–∞")],
            [KeyboardButton("–ù–∞—É—á—Ä—É–∫–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        
        await update.message.reply_text(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –∏—â–µ–º –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã:",
            reply_markup=reply_markup
        )
        
        return TOPIC_ROLE
    
    async def get_topic_role(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–º—É"""
        user_id = update.effective_user.id
        role_text = update.message.text
        
        seeking_role = 'student' if role_text == "–°—Ç—É–¥–µ–Ω—Ç–∞" else 'supervisor'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        topic_data = {
            'title': self.user_data[user_id]['topic']['title'],
            'description': self.user_data[user_id]['topic']['description'],
            'expected_outcomes': self.user_data[user_id]['topic']['expected_outcomes'],
            'required_skills': self.user_data[user_id]['topic']['required_skills'],
            'seeking_role': seeking_role,
            'author_full_name': f"User_{user_id}"  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞
        }
        
        result = await self.api_request('POST', '/add-topic', topic_data)
        
        if result and result.get('status') == 'success':
            await update.message.reply_text(
                f"‚úÖ **–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
                f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ: {self.user_data[user_id]['topic']['title']}\n"
                f"üë• –ò—â–µ–º: {seeking_role}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardRemove()
            )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del self.user_data[user_id]
        
        return ConversationHandler.END
    
    async def add_supervisor_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—É—á—Ä—É–∫–∞"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_data:
            self.user_data[user_id] = {}
        self.user_data[user_id]['supervisor'] = {}
        
        await query.edit_message_text(
            "üë®‚Äçüè´ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:",
            parse_mode='Markdown'
        )
        
        return SUPERVISOR_NAME
    
    async def get_supervisor_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç –§–ò–û –Ω–∞—É—á—Ä—É–∫–∞"""
        user_id = update.effective_user.id
        name = update.message.text
        
        self.user_data[user_id]['supervisor']['full_name'] = name
        
        await update.message.reply_text(
            "üìß –í–≤–µ–¥–∏—Ç–µ email (–∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        )
        
        return SUPERVISOR_EMAIL
    
    async def get_supervisor_email(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç email –Ω–∞—É—á—Ä—É–∫–∞"""
        user_id = update.effective_user.id
        email = update.message.text if update.message.text != '–Ω–µ—Ç' else None
        
        self.user_data[user_id]['supervisor']['email'] = email
        
        await update.message.reply_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ username –≤ Telegram (–∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        )
        
        return SUPERVISOR_USERNAME
    
    async def get_supervisor_username(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç username –Ω–∞—É—á—Ä—É–∫–∞"""
        user_id = update.effective_user.id
        username = update.message.text if update.message.text != '–Ω–µ—Ç' else None
        
        self.user_data[user_id]['supervisor']['username'] = username
        
        await update.message.reply_text(
            "üè¢ –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:"
        )
        
        return SUPERVISOR_POSITION
    
    async def get_supervisor_position(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–∞—É—á—Ä—É–∫–∞"""
        user_id = update.effective_user.id
        position = update.message.text
        
        self.user_data[user_id]['supervisor']['position'] = position
        
        await update.message.reply_text(
            "üéì –í–≤–µ–¥–∏—Ç–µ —É—á–µ–Ω—É—é —Å—Ç–µ–ø–µ–Ω—å (–∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        )
        
        return SUPERVISOR_DEGREE
    
    async def get_supervisor_degree(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç —É—á–µ–Ω—É—é —Å—Ç–µ–ø–µ–Ω—å –Ω–∞—É—á—Ä—É–∫–∞"""
        user_id = update.effective_user.id
        degree = update.message.text if update.message.text != '–Ω–µ—Ç' else None
        
        self.user_data[user_id]['supervisor']['degree'] = degree
        
        await update.message.reply_text(
            "üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:"
        )
        
        return SUPERVISOR_CAPACITY
    
    async def get_supervisor_capacity(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç"""
        user_id = update.effective_user.id
        try:
            capacity = int(update.message.text)
            self.user_data[user_id]['supervisor']['capacity'] = capacity
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return SUPERVISOR_CAPACITY
        
        await update.message.reply_text(
            "üìã –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç—É–¥–µ–Ω—Ç–∞–º (–∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        )
        
        return SUPERVISOR_REQUIREMENTS
    
    async def get_supervisor_requirements(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç—É–¥–µ–Ω—Ç–∞–º"""
        user_id = update.effective_user.id
        requirements = update.message.text if update.message.text != '–Ω–µ—Ç' else None
        
        self.user_data[user_id]['supervisor']['requirements'] = requirements
        
        await update.message.reply_text(
            "üî¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—É—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:"
        )
        
        return SUPERVISOR_INTERESTS
    
    async def get_supervisor_interests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—É—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—É—á—Ä—É–∫–∞"""
        user_id = update.effective_user.id
        interests = update.message.text if update.message.text != '–Ω–µ—Ç' else None
        
        self.user_data[user_id]['supervisor']['interests'] = interests
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        supervisor_data = {
            'full_name': self.user_data[user_id]['supervisor']['full_name'],
            'email': self.user_data[user_id]['supervisor']['email'],
            'username': self.user_data[user_id]['supervisor']['username'],
            'position': self.user_data[user_id]['supervisor']['position'],
            'degree': self.user_data[user_id]['supervisor']['degree'],
            'capacity': str(self.user_data[user_id]['supervisor']['capacity']),
            'requirements': self.user_data[user_id]['supervisor']['requirements'],
            'interests': self.user_data[user_id]['supervisor']['interests']
        }
        
        result = await self.api_request('POST', '/add-supervisor', supervisor_data)
        
        if result and result.get('status') == 'success':
            await update.message.reply_text(
                f"‚úÖ **–ù–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
                f"üë®‚Äçüè´ –§–ò–û: {self.user_data[user_id]['supervisor']['full_name']}\n"
                f"üè¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {self.user_data[user_id]['supervisor']['position']}\n"
                f"üë• –ú–µ—Å—Ç: {self.user_data[user_id]['supervisor']['capacity']}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardRemove()
            )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del self.user_data[user_id]
        
        return ConversationHandler.END
    
    async def find_candidates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Ö–æ–¥–∏—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Ç–µ–º–∞–º"""
        query = update.callback_query
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
        topics_data = await self.api_request('GET', '/latest?kind=topics')
        
        if not topics_data:
            await query.edit_message_text("üìù –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
        keyboard = []
        for topic in topics_data[:10]:
            role_text = "—Å—Ç—É–¥–µ–Ω—Ç–∞" if topic.get('seeking_role') == 'student' else "–Ω–∞—É—á—Ä—É–∫–∞"
            keyboard.append([
                InlineKeyboardButton(
                    f"üìö {topic.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:30]}... ({role_text})",
                    callback_data=f"topic_{topic.get('id')}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîç **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:**\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–º—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def import_sheet_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–º–ø–æ—Ä—Ç–µ –∏–∑ Google Sheets"""
        query = update.callback_query
        
        text = (
            "üìä **–ò–º–ø–æ—Ä—Ç –∏–∑ Google Sheets**\n\n"
            "–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:\n"
            "üåê http://localhost:8000\n\n"
            "**–ß—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è:**\n"
            "‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏\n"
            "‚Ä¢ –¢–µ–º—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π\n"
            "‚Ä¢ –ù–∞–≤—ã–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã\n\n"
            "**–ù–∞—Å—Ç—Ä–æ–π–∫–∞:**\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –≤ .env:\n"
            "   - SPREADSHEET_ID\n"
            "   - SERVICE_ACCOUNT_FILE\n"
            "2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
            "3. –í–≤–µ–¥–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def view_students(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
        query = update.callback_query
        
        students_data = await self.api_request('GET', '/api/students?limit=10')
        
        if not students_data:
            await query.edit_message_text("üë• –°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        text = "üë• **–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:**\n\n"
        keyboard = []
        
        for student in students_data:
            text += f"**{student.get('full_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}**\n"
            if student.get('program'):
                text += f"üìö –ü—Ä–æ–≥—Ä–∞–º–º–∞: {student.get('program')}\n"
            if student.get('skills'):
                text += f"üõ†Ô∏è –ù–∞–≤—ã–∫–∏: {student.get('skills')}\n"
            if student.get('interests'):
                text += f"üî¨ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {student.get('interests')}\n"
            text += f"üìÖ ID: {student.get('id')}\n\n"
            
            keyboard.append([
                InlineKeyboardButton(
                    f"üë§ {student.get('full_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')[:30]}...",
                    callback_data=f"student_{student.get('id')}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def view_supervisors(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—É—á–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π"""
        query = update.callback_query
        
        supervisors_data = await self.api_request('GET', '/api/supervisors?limit=10')
        
        if not supervisors_data:
            await query.edit_message_text("üë®‚Äçüè´ –ù–∞—É—á–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        text = "üë®‚Äçüè´ **–°–ø–∏—Å–æ–∫ –Ω–∞—É—á–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π:**\n\n"
        keyboard = []
        
        for supervisor in supervisors_data:
            text += f"**{supervisor.get('full_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}**\n"
            if supervisor.get('position'):
                text += f"üè¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {supervisor.get('position')}\n"
            if supervisor.get('degree'):
                text += f"üéì –°—Ç–µ–ø–µ–Ω—å: {supervisor.get('degree')}\n"
            if supervisor.get('capacity'):
                text += f"üë• –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {supervisor.get('capacity')}\n"
            if supervisor.get('interests'):
                text += f"üî¨ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {supervisor.get('interests')}\n"
            text += f"üìÖ ID: {supervisor.get('id')}\n\n"
            
            keyboard.append([
                InlineKeyboardButton(
                    f"üë®‚Äçüè´ {supervisor.get('full_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')[:30]}...",
                    callback_data=f"supervisor_{supervisor.get('id')}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def view_topics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º"""
        query = update.callback_query
        
        topics_data = await self.api_request('GET', '/api/topics?limit=10')
        
        if not topics_data:
            await query.edit_message_text("üìù –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        text = "üìù **–°–ø–∏—Å–æ–∫ —Ç–µ–º:**\n\n"
        keyboard = []
        
        for topic in topics_data:
            role_text = "—Å—Ç—É–¥–µ–Ω—Ç–∞" if topic.get('seeking_role') == 'student' else "–Ω–∞—É—á—Ä—É–∫–∞"
            text += f"**{topic.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n"
            text += f"üë§ –ê–≤—Ç–æ—Ä: {topic.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            text += f"üë• –ò—â–µ–º: {role_text}\n"
            text += f"üìÖ ID: {topic.get('id')}\n\n"
            
            keyboard.append([
                InlineKeyboardButton(
                    f"üìö {topic.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:30]}...",
                    callback_data=f"topic_{topic.get('id')}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        self.application.run_polling()

if __name__ == "__main__":
    bot = MentorMatchBot()
    bot.run()
