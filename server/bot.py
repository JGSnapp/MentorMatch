import os
import logging
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes
from dotenv import load_dotenv
import psycopg2
import psycopg2.extras
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_ACTION, ADDING_TOPIC, ADDING_SUPERVISOR, IMPORTING_SHEET = range(4)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã
TOPIC_TITLE, TOPIC_DESCRIPTION, TOPIC_OUTCOMES, TOPIC_SKILLS, TOPIC_ROLE = range(4, 9)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—É—á—Ä—É–∫–∞
SUPERVISOR_NAME, SUPERVISOR_EMAIL, SUPERVISOR_USERNAME, SUPERVISOR_POSITION, SUPERVISOR_DEGREE, SUPERVISOR_CAPACITY, SUPERVISOR_REQUIREMENTS, SUPERVISOR_INTERESTS = range(9, 17)

class MentorMatchBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_data: Dict[int, Dict[str, Any]] = {}
        
    def build_db_dsn(self) -> str:
        """–°—Ç—Ä–æ–∏—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        dsn = os.getenv('DATABASE_URL')
        if dsn:
            return dsn
        user = os.getenv('POSTGRES_USER', 'mentormatch')
        password = os.getenv('POSTGRES_PASSWORD', 'secret')
        host = os.getenv('POSTGRES_HOST', 'localhost')
        port = os.getenv('POSTGRES_PORT', '5432')
        db = os.getenv('POSTGRES_DB', 'mentormatch')
        return f'postgresql://{user}:{password}@{host}:{port}/{db}'
    
    def get_conn(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
        return psycopg2.connect(self.build_db_dsn())
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("cancel", self.cancel_command))
        
        # Conversation handler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã
        topic_conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.add_topic_start, pattern='^add_topic$')],
            states={
                TOPIC_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_topic_title)],
                TOPIC_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_topic_description)],
                TOPIC_OUTCOMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_topic_outcomes)],
                TOPIC_SKILLS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_topic_skills)],
                TOPIC_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_topic_role)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel_command)],
        )
        self.application.add_handler(topic_conv_handler)
        
        # Conversation handler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—É—á—Ä—É–∫–∞
        supervisor_conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.add_supervisor_start, pattern='^add_supervisor$')],
            states={
                SUPERVISOR_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_supervisor_name)],
                SUPERVISOR_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_supervisor_email)],
                SUPERVISOR_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_supervisor_username)],
                SUPERVISOR_POSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_supervisor_position)],
                SUPERVISOR_DEGREE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_supervisor_degree)],
                SUPERVISOR_CAPACITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_supervisor_capacity)],
                SUPERVISOR_REQUIREMENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_supervisor_requirements)],
                SUPERVISOR_INTERESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_supervisor_interests)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel_command)],
        )
        self.application.add_handler(supervisor_conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [InlineKeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", callback_data="add_topic")],
            [InlineKeyboardButton("üë®‚Äçüè´ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—É—á—Ä—É–∫–∞", callback_data="add_supervisor")],
            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", callback_data="find_candidates")],
            [InlineKeyboardButton("üìä –ò–º–ø–æ—Ä—Ç –∏–∑ Google Sheets", callback_data="import_sheet")],
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data="list_students")],
            [InlineKeyboardButton("üë®‚Äçüè´ –°–ø–∏—Å–æ–∫ –Ω–∞—É—á—Ä—É–∫–æ–≤", callback_data="list_supervisors")],
            [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ —Ç–µ–º", callback_data="list_topics")],
            [InlineKeyboardButton("‚ùå –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="reset_data")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MentorMatch Bot!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        
        return CHOOSING_ACTION
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ **MentorMatch Bot - –ü–æ–º–æ—â—å**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

**–§—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º –¥–ª—è –í–ö–†
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
‚Ä¢ –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Ç–µ–º–∞–º
‚Ä¢ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ç–µ–º
‚Ä¢ –°–±—Ä–æ—Å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.user_data:
            del self.user_data[user_id]
        
        await update.message.reply_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        
        return ConversationHandler.END
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "find_candidates":
            await self.find_candidates(update, context)
        elif query.data == "import_sheet":
            await self.import_sheet_start(update, context)
        elif query.data == "list_students":
            await self.list_students(update, context)
        elif query.data == "list_supervisors":
            await self.list_supervisors(update, context)
        elif query.data == "list_topics":
            await self.list_topics(update, context)
        elif query.data == "reset_data":
            await self.reset_user_data(update, context)
    
    async def add_topic_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_data:
            self.user_data[user_id] = {}
        self.user_data[user_id]['topic'] = {}
        
        await query.edit_message_text(
            "üìö **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã:",
            parse_mode='Markdown'
        )
        
        return TOPIC_TITLE
    
    async def get_topic_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã"""
        user_id = update.effective_user.id
        title = update.message.text
        
        self.user_data[user_id]['topic']['title'] = title
        
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã:"
        )
        
        return TOPIC_DESCRIPTION
    
    async def get_topic_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã"""
        user_id = update.effective_user.id
        description = update.message.text
        
        self.user_data[user_id]['topic']['description'] = description
        
        await update.message.reply_text(
            "üéØ –í–≤–µ–¥–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
        )
        
        return TOPIC_OUTCOMES
    
    async def get_topic_outcomes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        user_id = update.effective_user.id
        outcomes = update.message.text
        
        self.user_data[user_id]['topic']['expected_outcomes'] = outcomes
        
        await update.message.reply_text(
            "üõ†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):"
        )
        
        return TOPIC_SKILLS
    
    async def get_topic_skills(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏"""
        user_id = update.effective_user.id
        skills = update.message.text
        
        self.user_data[user_id]['topic']['required_skills'] = skills
        
        keyboard = [
            [KeyboardButton("–°—Ç—É–¥–µ–Ω—Ç–∞"), KeyboardButton("–ù–∞—É—á—Ä—É–∫–∞")],
            [KeyboardButton("–û—Ç–º–µ–Ω–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await update.message.reply_text(
            "üë• –ö–æ–≥–æ –∏—â–µ—Ç–µ –ø–æ–¥ —ç—Ç—É —Ç–µ–º—É?",
            reply_markup=reply_markup
        )
        
        return TOPIC_ROLE
    
    async def get_topic_role(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–º—É"""
        user_id = update.effective_user.id
        role_text = update.message.text
        
        if role_text == "–û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        seeking_role = 'student' if role_text == "–°—Ç—É–¥–µ–Ω—Ç–∞" else 'supervisor'
        self.user_data[user_id]['topic']['seeking_role'] = seeking_role
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –≤ –ë–î
        try:
            with self.get_conn() as conn, conn.cursor() as cur:
                cur.execute(
                    '''
                    INSERT INTO topics(author_user_id, title, description, expected_outcomes,
                                       required_skills, seeking_role, is_active, created_at, updated_at)
                    VALUES (%s, %s, %s, %s, %s, %s, TRUE, now(), now())
                    RETURNING id
                    ''', (
                        user_id,
                        self.user_data[user_id]['topic']['title'],
                        self.user_data[user_id]['topic']['description'],
                        self.user_data[user_id]['topic']['expected_outcomes'],
                        self.user_data[user_id]['topic']['required_skills'],
                        seeking_role,
                    ),
                )
                topic_id = cur.fetchone()[0]
                conn.commit()
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del self.user_data[user_id]
            
            await update.message.reply_text(
                f"‚úÖ **–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
                f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ: {self.user_data[user_id]['topic']['title']}\n"
                f"üë• –ò—â–µ–º: {seeking_role}\n"
                f"üÜî ID —Ç–µ–º—ã: {topic_id}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardRemove()
            )
        
        return ConversationHandler.END
    
    async def add_supervisor_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—É—á—Ä—É–∫–∞"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_data:
            self.user_data[user_id] = {}
        self.user_data[user_id]['supervisor'] = {}
        
        await query.edit_message_text(
            "üë®‚Äçüè´ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:",
            parse_mode='Markdown'
        )
        
        return SUPERVISOR_NAME
    
    async def get_supervisor_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç –§–ò–û –Ω–∞—É—á—Ä—É–∫–∞"""
        user_id = update.effective_user.id
        name = update.message.text
        
        self.user_data[user_id]['supervisor']['full_name'] = name
        
        await update.message.reply_text(
            "üìß –í–≤–µ–¥–∏—Ç–µ email (–∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        )
        
        return SUPERVISOR_EMAIL
    
    async def get_supervisor_email(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç email –Ω–∞—É—á—Ä—É–∫–∞"""
        user_id = update.effective_user.id
        email = update.message.text if update.message.text != '–Ω–µ—Ç' else None
        
        self.user_data[user_id]['supervisor']['email'] = email
        
        await update.message.reply_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ username –≤ Telegram (–∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        )
        
        return SUPERVISOR_USERNAME
    
    async def get_supervisor_username(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç username –Ω–∞—É—á—Ä—É–∫–∞"""
        user_id = update.effective_user.id
        username = update.message.text if update.message.text != '–Ω–µ—Ç' else None
        
        self.user_data[user_id]['supervisor']['username'] = username
        
        await update.message.reply_text(
            "üè¢ –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:"
        )
        
        return SUPERVISOR_POSITION
    
    async def get_supervisor_position(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–∞—É—á—Ä—É–∫–∞"""
        user_id = update.effective_user.id
        position = update.message.text
        
        self.user_data[user_id]['supervisor']['position'] = position
        
        await update.message.reply_text(
            "üéì –í–≤–µ–¥–∏—Ç–µ —É—á–µ–Ω—É—é —Å—Ç–µ–ø–µ–Ω—å (–∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        )
        
        return SUPERVISOR_DEGREE
    
    async def get_supervisor_degree(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç —É—á–µ–Ω—É—é —Å—Ç–µ–ø–µ–Ω—å –Ω–∞—É—á—Ä—É–∫–∞"""
        user_id = update.effective_user.id
        degree = update.message.text if update.message.text != '–Ω–µ—Ç' else None
        
        self.user_data[user_id]['supervisor']['degree'] = degree
        
        await update.message.reply_text(
            "üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å:"
        )
        
        return SUPERVISOR_CAPACITY
    
    async def get_supervisor_capacity(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
        user_id = update.effective_user.id
        try:
            capacity = int(update.message.text)
            self.user_data[user_id]['supervisor']['capacity'] = capacity
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return SUPERVISOR_CAPACITY
        
        await update.message.reply_text(
            "üìã –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç—É–¥–µ–Ω—Ç–∞–º (–∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        )
        
        return SUPERVISOR_REQUIREMENTS
    
    async def get_supervisor_requirements(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç—É–¥–µ–Ω—Ç–∞–º"""
        user_id = update.effective_user.id
        requirements = update.message.text if update.message.text != '–Ω–µ—Ç' else None
        
        self.user_data[user_id]['supervisor']['requirements'] = requirements
        
        await update.message.reply_text(
            "üî¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—É—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        )
        
        return SUPERVISOR_INTERESTS
    
    async def get_supervisor_interests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—É—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—É—á—Ä—É–∫–∞"""
        user_id = update.effective_user.id
        interests = update.message.text if update.message.text != '–Ω–µ—Ç' else None
        
        self.user_data[user_id]['supervisor']['interests'] = interests
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—É—á—Ä—É–∫–∞ –≤ –ë–î
        try:
            with self.get_conn() as conn, conn.cursor() as cur:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cur.execute(
                    '''
                    INSERT INTO users(full_name, email, username, role, created_at, updated_at)
                    VALUES (%s, %s, %s, 'supervisor', now(), now())
                    RETURNING id
                    ''', (
                        self.user_data[user_id]['supervisor']['full_name'],
                        self.user_data[user_id]['supervisor']['email'],
                        self.user_data[user_id]['supervisor']['username'],
                    ),
                )
                user_id_db = cur.fetchone()[0]
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—É—á—Ä—É–∫–∞
                cur.execute(
                    '''
                    INSERT INTO supervisor_profiles(user_id, position, degree, capacity, requirements, interests)
                    VALUES (%s, %s, %s, %s, %s, %s)
                    ''', (
                        user_id_db,
                        self.user_data[user_id]['supervisor']['position'],
                        self.user_data[user_id]['supervisor']['degree'],
                        self.user_data[user_id]['supervisor']['capacity'],
                        self.user_data[user_id]['supervisor']['requirements'],
                        self.user_data[user_id]['supervisor']['interests'],
                    ),
                )
                conn.commit()
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del self.user_data[user_id]
            
            await update.message.reply_text(
                f"‚úÖ **–ù–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
                f"üë®‚Äçüè´ –§–ò–û: {self.user_data[user_id]['supervisor']['full_name']}\n"
                f"üè¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {self.user_data[user_id]['supervisor']['position']}\n"
                f"üë• –ú–µ—Å—Ç: {self.user_data[user_id]['supervisor']['capacity']}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—É—á—Ä—É–∫–∞: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardRemove()
            )
        
        return ConversationHandler.END
    
    async def find_candidates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Ö–æ–¥–∏—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Ç–µ–º–∞–º"""
        query = update.callback_query
        
        try:
            with self.get_conn() as conn, conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cur:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
                cur.execute(
                    '''
                    SELECT t.id, t.title, t.seeking_role, u.full_name AS author
                    FROM topics t
                    JOIN users u ON u.id = t.author_user_id
                    WHERE t.is_active = TRUE
                    ORDER BY t.created_at DESC
                    LIMIT 10
                    '''
                )
                topics = cur.fetchall()
                
                if not topics:
                    await query.edit_message_text("üìù –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
                keyboard = []
                for topic in topics:
                    role_text = "—Å—Ç—É–¥–µ–Ω—Ç–∞" if topic['seeking_role'] == 'student' else "–Ω–∞—É—á—Ä—É–∫–∞"
                    keyboard.append([
                        InlineKeyboardButton(
                            f"üìö {topic['title'][:30]}... ({role_text})",
                            callback_data=f"topic_{topic['id']}"
                        )
                    ])
                
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "üîç **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:**\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–º—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
    
    async def import_sheet_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Google Sheets"""
        query = update.callback_query
        
        await query.edit_message_text(
            "üìä **–ò–º–ø–æ—Ä—Ç –∏–∑ Google Sheets**\n\n"
            "–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:\n"
            "http://localhost:8000\n\n"
            "–ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n"
            "‚Ä¢ SPREADSHEET_ID\n"
            "‚Ä¢ SERVICE_ACCOUNT_FILE\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
    
    async def list_students(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
        query = update.callback_query
        
        try:
            with self.get_conn() as conn, conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cur:
                cur.execute(
                    '''
                    SELECT u.id, u.full_name, u.username, u.email, u.created_at,
                           sp.program, sp.skills, sp.interests
                    FROM users u
                    LEFT JOIN student_profiles sp ON sp.user_id = u.id
                    WHERE u.role = 'student'
                    ORDER BY u.created_at DESC
                    LIMIT 10
                    '''
                )
                students = cur.fetchall()
                
                if not students:
                    await query.edit_message_text("üë• –°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return
                
                text = "üë• **–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:**\n\n"
                for student in students:
                    text += f"üë§ **{student['full_name']}**\n"
                    if student['program']:
                        text += f"üìö –ü—Ä–æ–≥—Ä–∞–º–º–∞: {student['program']}\n"
                    if student['skills']:
                        text += f"üõ†Ô∏è –ù–∞–≤—ã–∫–∏: {student['skills']}\n"
                    if student['interests']:
                        text += f"üî¨ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {student['interests']}\n"
                    text += f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {student['created_at'].strftime('%d.%m.%Y')}\n\n"
                
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
    
    async def list_supervisors(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—É—á—Ä—É–∫–æ–≤"""
        query = update.callback_query
        
        try:
            with self.get_conn() as conn, conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cur:
                cur.execute(
                    '''
                    SELECT u.id, u.full_name, u.username, u.email, u.created_at,
                           sup.position, sup.degree, sup.capacity, sup.interests
                    FROM users u
                    LEFT JOIN supervisor_profiles sup ON sup.user_id = u.id
                    WHERE u.role = 'supervisor'
                    ORDER BY u.created_at DESC
                    LIMIT 10
                    '''
                )
                supervisors = cur.fetchall()
                
                if not supervisors:
                    await query.edit_message_text("üë®‚Äçüè´ –ù–∞—É—á–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return
                
                text = "üë®‚Äçüè´ **–°–ø–∏—Å–æ–∫ –Ω–∞—É—á–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π:**\n\n"
                for supervisor in supervisors:
                    text += f"üë§ **{supervisor['full_name']}**\n"
                    if supervisor['position']:
                        text += f"üè¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {supervisor['position']}\n"
                    if supervisor['degree']:
                        text += f"üéì –°—Ç–µ–ø–µ–Ω—å: {supervisor['degree']}\n"
                    if supervisor['capacity']:
                        text += f"üë• –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {supervisor['capacity']}\n"
                    if supervisor['interests']:
                        text += f"üî¨ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {supervisor['interests']}\n"
                    text += f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {supervisor['created_at'].strftime('%d.%m.%Y')}\n\n"
                
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞—É—á—Ä—É–∫–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞—É—á–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π.")
    
    async def list_topics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º"""
        query = update.callback_query
        
        try:
            with self.get_conn() as conn, conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cur:
                cur.execute(
                    '''
                    SELECT t.id, t.title, t.seeking_role, t.created_at, u.full_name AS author
                    FROM topics t
                    JOIN users u ON u.id = t.author_user_id
                    WHERE t.is_active = TRUE
                    ORDER BY t.created_at DESC
                    LIMIT 10
                    '''
                )
                topics = cur.fetchall()
                
                if not topics:
                    await query.edit_message_text("üìù –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return
                
                text = "üìù **–°–ø–∏—Å–æ–∫ —Ç–µ–º:**\n\n"
                for topic in topics:
                    role_text = "—Å—Ç—É–¥–µ–Ω—Ç–∞" if topic['seeking_role'] == 'student' else "–Ω–∞—É—á—Ä—É–∫–∞"
                    text += f"üìö **{topic['title']}**\n"
                    text += f"üë§ –ê–≤—Ç–æ—Ä: {topic['author']}\n"
                    text += f"üë• –ò—â–µ–º: {role_text}\n"
                    text += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {topic['created_at'].strftime('%d.%m.%Y')}\n\n"
                
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º.")
    
    async def reset_user_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        user_id = query.from_user.id
        
        if user_id in self.user_data:
            del self.user_data[user_id]
        
        await query.edit_message_text(
            "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ MentorMatch Bot...")
        self.application.run_polling()

if __name__ == "__main__":
    try:
        bot = MentorMatchBot()
        bot.run()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
